# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.11)
{
  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";

    # track nix-unstable
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";

    # Seamless integration of https://pre-commit.com git hooks with Nix
    pre-commit-hooks.url = "github:cachix/pre-commit-hooks.nix";
  };

  # Flake outputs that other flakes can use
  outputs = {
    self,
    flake-schemas,
    nixpkgs,
    pre-commit-hooks,
  }: let
    # Helpers for producing system-specific outputs
    supportedSystems = ["x86_64-linux"];
    forEachSupportedSystem = f:
      nixpkgs.lib.genAttrs supportedSystems (system:
        f {
          pkgs = import nixpkgs {inherit system;};
          inherit system;
        });
  in {
    # Schemas tell Nix about the structure of your flake's outputs
    schemas = flake-schemas.schemas;

    checks = forEachSupportedSystem ({system}: {
      # check that the code complies with a minimum standard use `--no-verify`
      # to bypass this check when committing or pushing code
      pre-commit-check = pre-commit-hooks.lib.${system}.run {
        src = ./.;
        hooks = {
          alejandra = {
            enable = true;
            excludes = ["vendor"];
          };
          deadnix = {
            enable = true;
            excludes = ["vendor"];
          };
          gofmt = {
            enable = true;
            excludes = ["vendor"];
          };
          golangci-lint = {
            enable = true;
            excludes = ["vendor"];
          };
          govet = {
            enable = true;
            excludes = ["vendor"];
          };
          gotest = {
            enable = true;
            excludes = ["vendor"];
          };
        };
      };
    });

    # Development environments
    devShells = forEachSupportedSystem ({
      pkgs,
      system,
    }: {
      default = pkgs.mkShell {
        buildInputs = self.checks.${system}.pre-commit-check.enabledPackages;
        # Pinned packages available in the environment
        packages = with pkgs; [buf golines];
        shellHook = self.checks.${system}.pre-commit-check.shellHook;
      };
    });
  };
}
