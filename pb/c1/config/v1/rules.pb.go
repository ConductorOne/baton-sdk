// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: c1/config/v1/rules.proto

//go:build !protoopaque

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WellKnownString int32

const (
	WellKnownString_WELL_KNOWN_STRING_UNSPECIFIED WellKnownString = 0
	// Email specifies that the field must be a valid email address as
	// defined by RFC 5322
	WellKnownString_WELL_KNOWN_STRING_EMAIL WellKnownString = 1
	// Hostname specifies that the field must be a valid hostname as
	// defined by RFC 1034. This constraint does not support
	// internationalized domain names (IDNs).
	WellKnownString_WELL_KNOWN_STRING_HOSTNAME WellKnownString = 2
	// Ip specifies that the field must be a valid IP (v4 or v6) address.
	// Valid IPv6 addresses should not include surrounding square brackets.
	WellKnownString_WELL_KNOWN_STRING_IP WellKnownString = 3
	// Ipv4 specifies that the field must be a valid IPv4 address.
	WellKnownString_WELL_KNOWN_STRING_IPV4 WellKnownString = 4
	// Ipv6 specifies that the field must be a valid IPv6 address. Valid
	// IPv6 addresses should not include surrounding square brackets.
	WellKnownString_WELL_KNOWN_STRING_IPV6 WellKnownString = 5
	WellKnownString_WELL_KNOWN_STRING_URI  WellKnownString = 6
	// Address specifies that the field must be either a valid hostname as
	// defined by RFC 1034 (which does not support internationalized domain
	// names or IDNs), or it can be a valid IP (v4 or v6).
	WellKnownString_WELL_KNOWN_STRING_ADDRESS WellKnownString = 7
	// Uuid specifies that the field must be a valid UUID as defined by
	// RFC 4122
	WellKnownString_WELL_KNOWN_STRING_UUID WellKnownString = 8
)

// Enum value maps for WellKnownString.
var (
	WellKnownString_name = map[int32]string{
		0: "WELL_KNOWN_STRING_UNSPECIFIED",
		1: "WELL_KNOWN_STRING_EMAIL",
		2: "WELL_KNOWN_STRING_HOSTNAME",
		3: "WELL_KNOWN_STRING_IP",
		4: "WELL_KNOWN_STRING_IPV4",
		5: "WELL_KNOWN_STRING_IPV6",
		6: "WELL_KNOWN_STRING_URI",
		7: "WELL_KNOWN_STRING_ADDRESS",
		8: "WELL_KNOWN_STRING_UUID",
	}
	WellKnownString_value = map[string]int32{
		"WELL_KNOWN_STRING_UNSPECIFIED": 0,
		"WELL_KNOWN_STRING_EMAIL":       1,
		"WELL_KNOWN_STRING_HOSTNAME":    2,
		"WELL_KNOWN_STRING_IP":          3,
		"WELL_KNOWN_STRING_IPV4":        4,
		"WELL_KNOWN_STRING_IPV6":        5,
		"WELL_KNOWN_STRING_URI":         6,
		"WELL_KNOWN_STRING_ADDRESS":     7,
		"WELL_KNOWN_STRING_UUID":        8,
	}
)

func (x WellKnownString) Enum() *WellKnownString {
	p := new(WellKnownString)
	*p = x
	return p
}

func (x WellKnownString) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownString) Descriptor() protoreflect.EnumDescriptor {
	return file_c1_config_v1_rules_proto_enumTypes[0].Descriptor()
}

func (WellKnownString) Type() protoreflect.EnumType {
	return &file_c1_config_v1_rules_proto_enumTypes[0]
}

func (x WellKnownString) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Int64Rules describes the constraints applied to `int64` values
type Int64Rules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Const specifies that this field must be exactly the specified value
	Eq *int64 `protobuf:"varint,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int64 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte *int64 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int64 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte *int64 `protobuf:"varint,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool `protobuf:"varint,8,opt,name=validate_empty,json=validateEmpty,proto3" json:"validate_empty,omitempty"`
	IsRequired    bool `protobuf:"varint,9,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Rules) Reset() {
	*x = Int64Rules{}
	mi := &file_c1_config_v1_rules_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Rules) ProtoMessage() {}

func (x *Int64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_c1_config_v1_rules_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Int64Rules) GetEq() int64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *Int64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int64Rules) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int64Rules) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Int64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Int64Rules) GetValidateEmpty() bool {
	if x != nil {
		return x.ValidateEmpty
	}
	return false
}

func (x *Int64Rules) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *Int64Rules) SetEq(v int64) {
	x.Eq = &v
}

func (x *Int64Rules) SetLt(v int64) {
	x.Lt = &v
}

func (x *Int64Rules) SetLte(v int64) {
	x.Lte = &v
}

func (x *Int64Rules) SetGt(v int64) {
	x.Gt = &v
}

func (x *Int64Rules) SetGte(v int64) {
	x.Gte = &v
}

func (x *Int64Rules) SetIn(v []int64) {
	x.In = v
}

func (x *Int64Rules) SetNotIn(v []int64) {
	x.NotIn = v
}

func (x *Int64Rules) SetValidateEmpty(v bool) {
	x.ValidateEmpty = v
}

func (x *Int64Rules) SetIsRequired(v bool) {
	x.IsRequired = v
}

func (x *Int64Rules) HasEq() bool {
	if x == nil {
		return false
	}
	return x.Eq != nil
}

func (x *Int64Rules) HasLt() bool {
	if x == nil {
		return false
	}
	return x.Lt != nil
}

func (x *Int64Rules) HasLte() bool {
	if x == nil {
		return false
	}
	return x.Lte != nil
}

func (x *Int64Rules) HasGt() bool {
	if x == nil {
		return false
	}
	return x.Gt != nil
}

func (x *Int64Rules) HasGte() bool {
	if x == nil {
		return false
	}
	return x.Gte != nil
}

func (x *Int64Rules) ClearEq() {
	x.Eq = nil
}

func (x *Int64Rules) ClearLt() {
	x.Lt = nil
}

func (x *Int64Rules) ClearLte() {
	x.Lte = nil
}

func (x *Int64Rules) ClearGt() {
	x.Gt = nil
}

func (x *Int64Rules) ClearGte() {
	x.Gte = nil
}

type Int64Rules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Const specifies that this field must be exactly the specified value
	Eq *int64
	// Lt specifies that this field must be less than the specified value,
	// exclusive
	Lt *int64
	// Lte specifies that this field must be less than or equal to the
	// specified value, inclusive
	Lte *int64
	// Gt specifies that this field must be greater than the specified value,
	// exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	// range is reversed.
	Gt *int64
	// Gte specifies that this field must be greater than or equal to the
	// specified value, inclusive. If the value of Gte is larger than a
	// specified Lt or Lte, the range is reversed.
	Gte *int64
	// In specifies that this field must be equal to one of the specified
	// values
	In []int64
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn []int64
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool
	IsRequired    bool
}

func (b0 Int64Rules_builder) Build() *Int64Rules {
	m0 := &Int64Rules{}
	b, x := &b0, m0
	_, _ = b, x
	x.Eq = b.Eq
	x.Lt = b.Lt
	x.Lte = b.Lte
	x.Gt = b.Gt
	x.Gte = b.Gte
	x.In = b.In
	x.NotIn = b.NotIn
	x.ValidateEmpty = b.ValidateEmpty
	x.IsRequired = b.IsRequired
	return m0
}

// BoolRules describes the constraints applied to `bool` values
type BoolRules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Const specifies that this field must be exactly the specified value
	Eq            *bool `protobuf:"varint,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	mi := &file_c1_config_v1_rules_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_c1_config_v1_rules_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BoolRules) GetEq() bool {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return false
}

func (x *BoolRules) SetEq(v bool) {
	x.Eq = &v
}

func (x *BoolRules) HasEq() bool {
	if x == nil {
		return false
	}
	return x.Eq != nil
}

func (x *BoolRules) ClearEq() {
	x.Eq = nil
}

type BoolRules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Const specifies that this field must be exactly the specified value
	Eq *bool
}

func (b0 BoolRules_builder) Build() *BoolRules {
	m0 := &BoolRules{}
	b, x := &b0, m0
	_, _ = b, x
	x.Eq = b.Eq
	return m0
}

// RepeatedRules describe the constraints applied to `repeated` values
type RepeatedRules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems *uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3,oneof" json:"min_items,omitempty"`
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems *uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3,oneof" json:"max_items,omitempty"`
	// Unique specifies that all elements in this field must be unique. This
	// constraint is only applicable to scalar and enum types (messages are not
	// supported).
	Unique bool `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// Items specifies the constraints to be applied to each item in the field.
	// Repeated message fields will still execute validation against each item
	// unless skip is specified here.
	//
	// Types that are valid to be assigned to ItemRules:
	//
	//	*RepeatedRules_Int64
	//	*RepeatedRules_Bool
	//	*RepeatedRules_String_
	ItemRules isRepeatedRules_ItemRules `protobuf_oneof:"item_rules"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool `protobuf:"varint,4,opt,name=validate_empty,json=validateEmpty,proto3" json:"validate_empty,omitempty"`
	IsRequired    bool `protobuf:"varint,5,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedRules) Reset() {
	*x = RepeatedRules{}
	mi := &file_c1_config_v1_rules_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRules) ProtoMessage() {}

func (x *RepeatedRules) ProtoReflect() protoreflect.Message {
	mi := &file_c1_config_v1_rules_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RepeatedRules) GetMinItems() uint64 {
	if x != nil && x.MinItems != nil {
		return *x.MinItems
	}
	return 0
}

func (x *RepeatedRules) GetMaxItems() uint64 {
	if x != nil && x.MaxItems != nil {
		return *x.MaxItems
	}
	return 0
}

func (x *RepeatedRules) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *RepeatedRules) GetItemRules() isRepeatedRules_ItemRules {
	if x != nil {
		return x.ItemRules
	}
	return nil
}

func (x *RepeatedRules) GetInt64() *Int64Rules {
	if x != nil {
		if x, ok := x.ItemRules.(*RepeatedRules_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *RepeatedRules) GetBool() *BoolRules {
	if x != nil {
		if x, ok := x.ItemRules.(*RepeatedRules_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *RepeatedRules) GetString() *StringRules {
	if x != nil {
		if x, ok := x.ItemRules.(*RepeatedRules_String_); ok {
			return x.String_
		}
	}
	return nil
}

// Deprecated: Use GetString instead.
func (x *RepeatedRules) GetString_() *StringRules {
	return x.GetString()
}

func (x *RepeatedRules) GetValidateEmpty() bool {
	if x != nil {
		return x.ValidateEmpty
	}
	return false
}

func (x *RepeatedRules) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *RepeatedRules) SetMinItems(v uint64) {
	x.MinItems = &v
}

func (x *RepeatedRules) SetMaxItems(v uint64) {
	x.MaxItems = &v
}

func (x *RepeatedRules) SetUnique(v bool) {
	x.Unique = v
}

func (x *RepeatedRules) SetInt64(v *Int64Rules) {
	if v == nil {
		x.ItemRules = nil
		return
	}
	x.ItemRules = &RepeatedRules_Int64{v}
}

func (x *RepeatedRules) SetBool(v *BoolRules) {
	if v == nil {
		x.ItemRules = nil
		return
	}
	x.ItemRules = &RepeatedRules_Bool{v}
}

func (x *RepeatedRules) SetString(v *StringRules) {
	if v == nil {
		x.ItemRules = nil
		return
	}
	x.ItemRules = &RepeatedRules_String_{v}
}

func (x *RepeatedRules) SetValidateEmpty(v bool) {
	x.ValidateEmpty = v
}

func (x *RepeatedRules) SetIsRequired(v bool) {
	x.IsRequired = v
}

func (x *RepeatedRules) HasMinItems() bool {
	if x == nil {
		return false
	}
	return x.MinItems != nil
}

func (x *RepeatedRules) HasMaxItems() bool {
	if x == nil {
		return false
	}
	return x.MaxItems != nil
}

func (x *RepeatedRules) HasItemRules() bool {
	if x == nil {
		return false
	}
	return x.ItemRules != nil
}

func (x *RepeatedRules) HasInt64() bool {
	if x == nil {
		return false
	}
	_, ok := x.ItemRules.(*RepeatedRules_Int64)
	return ok
}

func (x *RepeatedRules) HasBool() bool {
	if x == nil {
		return false
	}
	_, ok := x.ItemRules.(*RepeatedRules_Bool)
	return ok
}

func (x *RepeatedRules) HasString() bool {
	if x == nil {
		return false
	}
	_, ok := x.ItemRules.(*RepeatedRules_String_)
	return ok
}

func (x *RepeatedRules) ClearMinItems() {
	x.MinItems = nil
}

func (x *RepeatedRules) ClearMaxItems() {
	x.MaxItems = nil
}

func (x *RepeatedRules) ClearItemRules() {
	x.ItemRules = nil
}

func (x *RepeatedRules) ClearInt64() {
	if _, ok := x.ItemRules.(*RepeatedRules_Int64); ok {
		x.ItemRules = nil
	}
}

func (x *RepeatedRules) ClearBool() {
	if _, ok := x.ItemRules.(*RepeatedRules_Bool); ok {
		x.ItemRules = nil
	}
}

func (x *RepeatedRules) ClearString() {
	if _, ok := x.ItemRules.(*RepeatedRules_String_); ok {
		x.ItemRules = nil
	}
}

const RepeatedRules_ItemRules_not_set_case case_RepeatedRules_ItemRules = 0
const RepeatedRules_Int64_case case_RepeatedRules_ItemRules = 100
const RepeatedRules_Bool_case case_RepeatedRules_ItemRules = 101
const RepeatedRules_String__case case_RepeatedRules_ItemRules = 102

func (x *RepeatedRules) WhichItemRules() case_RepeatedRules_ItemRules {
	if x == nil {
		return RepeatedRules_ItemRules_not_set_case
	}
	switch x.ItemRules.(type) {
	case *RepeatedRules_Int64:
		return RepeatedRules_Int64_case
	case *RepeatedRules_Bool:
		return RepeatedRules_Bool_case
	case *RepeatedRules_String_:
		return RepeatedRules_String__case
	default:
		return RepeatedRules_ItemRules_not_set_case
	}
}

type RepeatedRules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems *uint64
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems *uint64
	// Unique specifies that all elements in this field must be unique. This
	// constraint is only applicable to scalar and enum types (messages are not
	// supported).
	Unique bool
	// Items specifies the constraints to be applied to each item in the field.
	// Repeated message fields will still execute validation against each item
	// unless skip is specified here.

	// Fields of oneof ItemRules:
	// Scalar Field Types
	Int64  *Int64Rules
	Bool   *BoolRules
	String *StringRules
	// -- end of ItemRules
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool
	IsRequired    bool
}

func (b0 RepeatedRules_builder) Build() *RepeatedRules {
	m0 := &RepeatedRules{}
	b, x := &b0, m0
	_, _ = b, x
	x.MinItems = b.MinItems
	x.MaxItems = b.MaxItems
	x.Unique = b.Unique
	if b.Int64 != nil {
		x.ItemRules = &RepeatedRules_Int64{b.Int64}
	}
	if b.Bool != nil {
		x.ItemRules = &RepeatedRules_Bool{b.Bool}
	}
	if b.String != nil {
		x.ItemRules = &RepeatedRules_String_{b.String}
	}
	x.ValidateEmpty = b.ValidateEmpty
	x.IsRequired = b.IsRequired
	return m0
}

type case_RepeatedRules_ItemRules protoreflect.FieldNumber

func (x case_RepeatedRules_ItemRules) String() string {
	md := file_c1_config_v1_rules_proto_msgTypes[2].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isRepeatedRules_ItemRules interface {
	isRepeatedRules_ItemRules()
}

type RepeatedRules_Int64 struct {
	// Scalar Field Types
	Int64 *Int64Rules `protobuf:"bytes,100,opt,name=int64,proto3,oneof"`
}

type RepeatedRules_Bool struct {
	Bool *BoolRules `protobuf:"bytes,101,opt,name=bool,proto3,oneof"`
}

type RepeatedRules_String_ struct {
	String_ *StringRules `protobuf:"bytes,102,opt,name=string,proto3,oneof"` // RepeatedRules repeated = 103;
}

func (*RepeatedRules_Int64) isRepeatedRules_ItemRules() {}

func (*RepeatedRules_Bool) isRepeatedRules_ItemRules() {}

func (*RepeatedRules_String_) isRepeatedRules_ItemRules() {}

type RepeatedStringRules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems *uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3,oneof" json:"min_items,omitempty"`
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems *uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3,oneof" json:"max_items,omitempty"`
	// Unique specifies that all elements in this field must be unique. This
	// constraint is only applicable to scalar and enum types (messages are not
	// supported).
	Unique    bool         `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	ItemRules *StringRules `protobuf:"bytes,4,opt,name=item_rules,json=itemRules,proto3" json:"item_rules,omitempty"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool `protobuf:"varint,5,opt,name=validate_empty,json=validateEmpty,proto3" json:"validate_empty,omitempty"`
	IsRequired    bool `protobuf:"varint,6,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"` // repeated string eq = 7;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedStringRules) Reset() {
	*x = RepeatedStringRules{}
	mi := &file_c1_config_v1_rules_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedStringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedStringRules) ProtoMessage() {}

func (x *RepeatedStringRules) ProtoReflect() protoreflect.Message {
	mi := &file_c1_config_v1_rules_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RepeatedStringRules) GetMinItems() uint64 {
	if x != nil && x.MinItems != nil {
		return *x.MinItems
	}
	return 0
}

func (x *RepeatedStringRules) GetMaxItems() uint64 {
	if x != nil && x.MaxItems != nil {
		return *x.MaxItems
	}
	return 0
}

func (x *RepeatedStringRules) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *RepeatedStringRules) GetItemRules() *StringRules {
	if x != nil {
		return x.ItemRules
	}
	return nil
}

func (x *RepeatedStringRules) GetValidateEmpty() bool {
	if x != nil {
		return x.ValidateEmpty
	}
	return false
}

func (x *RepeatedStringRules) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *RepeatedStringRules) SetMinItems(v uint64) {
	x.MinItems = &v
}

func (x *RepeatedStringRules) SetMaxItems(v uint64) {
	x.MaxItems = &v
}

func (x *RepeatedStringRules) SetUnique(v bool) {
	x.Unique = v
}

func (x *RepeatedStringRules) SetItemRules(v *StringRules) {
	x.ItemRules = v
}

func (x *RepeatedStringRules) SetValidateEmpty(v bool) {
	x.ValidateEmpty = v
}

func (x *RepeatedStringRules) SetIsRequired(v bool) {
	x.IsRequired = v
}

func (x *RepeatedStringRules) HasMinItems() bool {
	if x == nil {
		return false
	}
	return x.MinItems != nil
}

func (x *RepeatedStringRules) HasMaxItems() bool {
	if x == nil {
		return false
	}
	return x.MaxItems != nil
}

func (x *RepeatedStringRules) HasItemRules() bool {
	if x == nil {
		return false
	}
	return x.ItemRules != nil
}

func (x *RepeatedStringRules) ClearMinItems() {
	x.MinItems = nil
}

func (x *RepeatedStringRules) ClearMaxItems() {
	x.MaxItems = nil
}

func (x *RepeatedStringRules) ClearItemRules() {
	x.ItemRules = nil
}

type RepeatedStringRules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// MinItems specifies that this field must have the specified number of
	// items at a minimum
	MinItems *uint64
	// MaxItems specifies that this field must have the specified number of
	// items at a maximum
	MaxItems *uint64
	// Unique specifies that all elements in this field must be unique. This
	// constraint is only applicable to scalar and enum types (messages are not
	// supported).
	Unique    bool
	ItemRules *StringRules
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool
	IsRequired    bool
}

func (b0 RepeatedStringRules_builder) Build() *RepeatedStringRules {
	m0 := &RepeatedStringRules{}
	b, x := &b0, m0
	_, _ = b, x
	x.MinItems = b.MinItems
	x.MaxItems = b.MaxItems
	x.Unique = b.Unique
	x.ItemRules = b.ItemRules
	x.ValidateEmpty = b.ValidateEmpty
	x.IsRequired = b.IsRequired
	return m0
}

type StringRules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Const specifies that this field must be exactly the specified value
	Eq *string `protobuf:"bytes,1,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// Len specifies that this field must be the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	Len *uint64 `protobuf:"varint,19,opt,name=len,proto3,oneof" json:"len,omitempty"`
	// MinLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a minimum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// MaxLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a maximum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
	// Pattern specifies that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern *string `protobuf:"bytes,6,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
	// Prefix specifies that this field must have the specified substring at
	// the beginning of the string.
	Prefix *string `protobuf:"bytes,7,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Suffix specifies that this field must have the specified substring at
	// the end of the string.
	Suffix *string `protobuf:"bytes,8,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// Contains specifies that this field must have the specified substring
	// anywhere in the string.
	Contains *string `protobuf:"bytes,9,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// NotContains specifies that this field cannot have the specified substring
	// anywhere in the string.
	NotContains *string `protobuf:"bytes,23,opt,name=not_contains,json=notContains,proto3,oneof" json:"not_contains,omitempty"`
	// In specifies that this field must be equal to one of the specified
	// values
	In []string `protobuf:"bytes,10,rep,name=in,proto3" json:"in,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn     []string        `protobuf:"bytes,11,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	WellKnown WellKnownString `protobuf:"varint,12,opt,name=well_known,json=wellKnown,proto3,enum=c1.config.v1.WellKnownString" json:"well_known,omitempty"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool `protobuf:"varint,26,opt,name=validate_empty,json=validateEmpty,proto3" json:"validate_empty,omitempty"`
	IsRequired    bool `protobuf:"varint,27,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	mi := &file_c1_config_v1_rules_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_c1_config_v1_rules_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StringRules) GetEq() string {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return ""
}

func (x *StringRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *StringRules) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *StringRules) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *StringRules) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *StringRules) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *StringRules) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *StringRules) GetContains() string {
	if x != nil && x.Contains != nil {
		return *x.Contains
	}
	return ""
}

func (x *StringRules) GetNotContains() string {
	if x != nil && x.NotContains != nil {
		return *x.NotContains
	}
	return ""
}

func (x *StringRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *StringRules) GetWellKnown() WellKnownString {
	if x != nil {
		return x.WellKnown
	}
	return WellKnownString_WELL_KNOWN_STRING_UNSPECIFIED
}

func (x *StringRules) GetValidateEmpty() bool {
	if x != nil {
		return x.ValidateEmpty
	}
	return false
}

func (x *StringRules) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *StringRules) SetEq(v string) {
	x.Eq = &v
}

func (x *StringRules) SetLen(v uint64) {
	x.Len = &v
}

func (x *StringRules) SetMinLen(v uint64) {
	x.MinLen = &v
}

func (x *StringRules) SetMaxLen(v uint64) {
	x.MaxLen = &v
}

func (x *StringRules) SetPattern(v string) {
	x.Pattern = &v
}

func (x *StringRules) SetPrefix(v string) {
	x.Prefix = &v
}

func (x *StringRules) SetSuffix(v string) {
	x.Suffix = &v
}

func (x *StringRules) SetContains(v string) {
	x.Contains = &v
}

func (x *StringRules) SetNotContains(v string) {
	x.NotContains = &v
}

func (x *StringRules) SetIn(v []string) {
	x.In = v
}

func (x *StringRules) SetNotIn(v []string) {
	x.NotIn = v
}

func (x *StringRules) SetWellKnown(v WellKnownString) {
	x.WellKnown = v
}

func (x *StringRules) SetValidateEmpty(v bool) {
	x.ValidateEmpty = v
}

func (x *StringRules) SetIsRequired(v bool) {
	x.IsRequired = v
}

func (x *StringRules) HasEq() bool {
	if x == nil {
		return false
	}
	return x.Eq != nil
}

func (x *StringRules) HasLen() bool {
	if x == nil {
		return false
	}
	return x.Len != nil
}

func (x *StringRules) HasMinLen() bool {
	if x == nil {
		return false
	}
	return x.MinLen != nil
}

func (x *StringRules) HasMaxLen() bool {
	if x == nil {
		return false
	}
	return x.MaxLen != nil
}

func (x *StringRules) HasPattern() bool {
	if x == nil {
		return false
	}
	return x.Pattern != nil
}

func (x *StringRules) HasPrefix() bool {
	if x == nil {
		return false
	}
	return x.Prefix != nil
}

func (x *StringRules) HasSuffix() bool {
	if x == nil {
		return false
	}
	return x.Suffix != nil
}

func (x *StringRules) HasContains() bool {
	if x == nil {
		return false
	}
	return x.Contains != nil
}

func (x *StringRules) HasNotContains() bool {
	if x == nil {
		return false
	}
	return x.NotContains != nil
}

func (x *StringRules) ClearEq() {
	x.Eq = nil
}

func (x *StringRules) ClearLen() {
	x.Len = nil
}

func (x *StringRules) ClearMinLen() {
	x.MinLen = nil
}

func (x *StringRules) ClearMaxLen() {
	x.MaxLen = nil
}

func (x *StringRules) ClearPattern() {
	x.Pattern = nil
}

func (x *StringRules) ClearPrefix() {
	x.Prefix = nil
}

func (x *StringRules) ClearSuffix() {
	x.Suffix = nil
}

func (x *StringRules) ClearContains() {
	x.Contains = nil
}

func (x *StringRules) ClearNotContains() {
	x.NotContains = nil
}

type StringRules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Const specifies that this field must be exactly the specified value
	Eq *string
	// Len specifies that this field must be the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	Len *uint64
	// MinLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a minimum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MinLen *uint64
	// MaxLen specifies that this field must be the specified number of
	// characters (Unicode code points) at a maximum. Note that the number of
	// characters may differ from the number of bytes in the string.
	MaxLen *uint64
	// Pattern specifies that this field must match against the specified
	// regular expression (RE2 syntax). The included expression should elide
	// any delimiters.
	Pattern *string
	// Prefix specifies that this field must have the specified substring at
	// the beginning of the string.
	Prefix *string
	// Suffix specifies that this field must have the specified substring at
	// the end of the string.
	Suffix *string
	// Contains specifies that this field must have the specified substring
	// anywhere in the string.
	Contains *string
	// NotContains specifies that this field cannot have the specified substring
	// anywhere in the string.
	NotContains *string
	// In specifies that this field must be equal to one of the specified
	// values
	In []string
	// NotIn specifies that this field cannot be equal to one of the specified
	// values
	NotIn     []string
	WellKnown WellKnownString
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool
	IsRequired    bool
}

func (b0 StringRules_builder) Build() *StringRules {
	m0 := &StringRules{}
	b, x := &b0, m0
	_, _ = b, x
	x.Eq = b.Eq
	x.Len = b.Len
	x.MinLen = b.MinLen
	x.MaxLen = b.MaxLen
	x.Pattern = b.Pattern
	x.Prefix = b.Prefix
	x.Suffix = b.Suffix
	x.Contains = b.Contains
	x.NotContains = b.NotContains
	x.In = b.In
	x.NotIn = b.NotIn
	x.WellKnown = b.WellKnown
	x.ValidateEmpty = b.ValidateEmpty
	x.IsRequired = b.IsRequired
	return m0
}

type StringMapRules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool `protobuf:"varint,1,opt,name=validate_empty,json=validateEmpty,proto3" json:"validate_empty,omitempty"`
	IsRequired    bool `protobuf:"varint,2,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringMapRules) Reset() {
	*x = StringMapRules{}
	mi := &file_c1_config_v1_rules_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMapRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMapRules) ProtoMessage() {}

func (x *StringMapRules) ProtoReflect() protoreflect.Message {
	mi := &file_c1_config_v1_rules_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StringMapRules) GetValidateEmpty() bool {
	if x != nil {
		return x.ValidateEmpty
	}
	return false
}

func (x *StringMapRules) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *StringMapRules) SetValidateEmpty(v bool) {
	x.ValidateEmpty = v
}

func (x *StringMapRules) SetIsRequired(v bool) {
	x.IsRequired = v
}

type StringMapRules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IgnoreEmpty specifies that the validation rules of this field should be
	// evaluated only if the field is not empty
	ValidateEmpty bool
	IsRequired    bool
}

func (b0 StringMapRules_builder) Build() *StringMapRules {
	m0 := &StringMapRules{}
	b, x := &b0, m0
	_, _ = b, x
	x.ValidateEmpty = b.ValidateEmpty
	x.IsRequired = b.IsRequired
	return m0
}

var File_c1_config_v1_rules_proto protoreflect.FileDescriptor

const file_c1_config_v1_rules_proto_rawDesc = "" +
	"\n" +
	"\x18c1/config/v1/rules.proto\x12\fc1.config.v1\"\x8d\x02\n" +
	"\n" +
	"Int64Rules\x12\x13\n" +
	"\x02eq\x18\x01 \x01(\x03H\x00R\x02eq\x88\x01\x01\x12\x13\n" +
	"\x02lt\x18\x02 \x01(\x03H\x01R\x02lt\x88\x01\x01\x12\x15\n" +
	"\x03lte\x18\x03 \x01(\x03H\x02R\x03lte\x88\x01\x01\x12\x13\n" +
	"\x02gt\x18\x04 \x01(\x03H\x03R\x02gt\x88\x01\x01\x12\x15\n" +
	"\x03gte\x18\x05 \x01(\x03H\x04R\x03gte\x88\x01\x01\x12\x0e\n" +
	"\x02in\x18\x06 \x03(\x03R\x02in\x12\x15\n" +
	"\x06not_in\x18\a \x03(\x03R\x05notIn\x12%\n" +
	"\x0evalidate_empty\x18\b \x01(\bR\rvalidateEmpty\x12\x1f\n" +
	"\vis_required\x18\t \x01(\bR\n" +
	"isRequiredB\x05\n" +
	"\x03_eqB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"'\n" +
	"\tBoolRules\x12\x13\n" +
	"\x02eq\x18\x01 \x01(\bH\x00R\x02eq\x88\x01\x01B\x05\n" +
	"\x03_eq\"\xf3\x02\n" +
	"\rRepeatedRules\x12 \n" +
	"\tmin_items\x18\x01 \x01(\x04H\x01R\bminItems\x88\x01\x01\x12 \n" +
	"\tmax_items\x18\x02 \x01(\x04H\x02R\bmaxItems\x88\x01\x01\x12\x16\n" +
	"\x06unique\x18\x03 \x01(\bR\x06unique\x120\n" +
	"\x05int64\x18d \x01(\v2\x18.c1.config.v1.Int64RulesH\x00R\x05int64\x12-\n" +
	"\x04bool\x18e \x01(\v2\x17.c1.config.v1.BoolRulesH\x00R\x04bool\x123\n" +
	"\x06string\x18f \x01(\v2\x19.c1.config.v1.StringRulesH\x00R\x06string\x12%\n" +
	"\x0evalidate_empty\x18\x04 \x01(\bR\rvalidateEmpty\x12\x1f\n" +
	"\vis_required\x18\x05 \x01(\bR\n" +
	"isRequiredB\f\n" +
	"\n" +
	"item_rulesB\f\n" +
	"\n" +
	"_min_itemsB\f\n" +
	"\n" +
	"_max_items\"\x8f\x02\n" +
	"\x13RepeatedStringRules\x12 \n" +
	"\tmin_items\x18\x01 \x01(\x04H\x00R\bminItems\x88\x01\x01\x12 \n" +
	"\tmax_items\x18\x02 \x01(\x04H\x01R\bmaxItems\x88\x01\x01\x12\x16\n" +
	"\x06unique\x18\x03 \x01(\bR\x06unique\x128\n" +
	"\n" +
	"item_rules\x18\x04 \x01(\v2\x19.c1.config.v1.StringRulesR\titemRules\x12%\n" +
	"\x0evalidate_empty\x18\x05 \x01(\bR\rvalidateEmpty\x12\x1f\n" +
	"\vis_required\x18\x06 \x01(\bR\n" +
	"isRequiredB\f\n" +
	"\n" +
	"_min_itemsB\f\n" +
	"\n" +
	"_max_items\"\xab\x04\n" +
	"\vStringRules\x12\x13\n" +
	"\x02eq\x18\x01 \x01(\tH\x00R\x02eq\x88\x01\x01\x12\x15\n" +
	"\x03len\x18\x13 \x01(\x04H\x01R\x03len\x88\x01\x01\x12\x1c\n" +
	"\amin_len\x18\x02 \x01(\x04H\x02R\x06minLen\x88\x01\x01\x12\x1c\n" +
	"\amax_len\x18\x03 \x01(\x04H\x03R\x06maxLen\x88\x01\x01\x12\x1d\n" +
	"\apattern\x18\x06 \x01(\tH\x04R\apattern\x88\x01\x01\x12\x1b\n" +
	"\x06prefix\x18\a \x01(\tH\x05R\x06prefix\x88\x01\x01\x12\x1b\n" +
	"\x06suffix\x18\b \x01(\tH\x06R\x06suffix\x88\x01\x01\x12\x1f\n" +
	"\bcontains\x18\t \x01(\tH\aR\bcontains\x88\x01\x01\x12&\n" +
	"\fnot_contains\x18\x17 \x01(\tH\bR\vnotContains\x88\x01\x01\x12\x0e\n" +
	"\x02in\x18\n" +
	" \x03(\tR\x02in\x12\x15\n" +
	"\x06not_in\x18\v \x03(\tR\x05notIn\x12<\n" +
	"\n" +
	"well_known\x18\f \x01(\x0e2\x1d.c1.config.v1.WellKnownStringR\twellKnown\x12%\n" +
	"\x0evalidate_empty\x18\x1a \x01(\bR\rvalidateEmpty\x12\x1f\n" +
	"\vis_required\x18\x1b \x01(\bR\n" +
	"isRequiredB\x05\n" +
	"\x03_eqB\x06\n" +
	"\x04_lenB\n" +
	"\n" +
	"\b_min_lenB\n" +
	"\n" +
	"\b_max_lenB\n" +
	"\n" +
	"\b_patternB\t\n" +
	"\a_prefixB\t\n" +
	"\a_suffixB\v\n" +
	"\t_containsB\x0f\n" +
	"\r_not_contains\"X\n" +
	"\x0eStringMapRules\x12%\n" +
	"\x0evalidate_empty\x18\x01 \x01(\bR\rvalidateEmpty\x12\x1f\n" +
	"\vis_required\x18\x02 \x01(\bR\n" +
	"isRequired*\x99\x02\n" +
	"\x0fWellKnownString\x12!\n" +
	"\x1dWELL_KNOWN_STRING_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17WELL_KNOWN_STRING_EMAIL\x10\x01\x12\x1e\n" +
	"\x1aWELL_KNOWN_STRING_HOSTNAME\x10\x02\x12\x18\n" +
	"\x14WELL_KNOWN_STRING_IP\x10\x03\x12\x1a\n" +
	"\x16WELL_KNOWN_STRING_IPV4\x10\x04\x12\x1a\n" +
	"\x16WELL_KNOWN_STRING_IPV6\x10\x05\x12\x19\n" +
	"\x15WELL_KNOWN_STRING_URI\x10\x06\x12\x1d\n" +
	"\x19WELL_KNOWN_STRING_ADDRESS\x10\a\x12\x1a\n" +
	"\x16WELL_KNOWN_STRING_UUID\x10\bB3Z1github.com/conductorone/baton-sdk/pb/c1/config/v1b\x06proto3"

var file_c1_config_v1_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_c1_config_v1_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_c1_config_v1_rules_proto_goTypes = []any{
	(WellKnownString)(0),        // 0: c1.config.v1.WellKnownString
	(*Int64Rules)(nil),          // 1: c1.config.v1.Int64Rules
	(*BoolRules)(nil),           // 2: c1.config.v1.BoolRules
	(*RepeatedRules)(nil),       // 3: c1.config.v1.RepeatedRules
	(*RepeatedStringRules)(nil), // 4: c1.config.v1.RepeatedStringRules
	(*StringRules)(nil),         // 5: c1.config.v1.StringRules
	(*StringMapRules)(nil),      // 6: c1.config.v1.StringMapRules
}
var file_c1_config_v1_rules_proto_depIdxs = []int32{
	1, // 0: c1.config.v1.RepeatedRules.int64:type_name -> c1.config.v1.Int64Rules
	2, // 1: c1.config.v1.RepeatedRules.bool:type_name -> c1.config.v1.BoolRules
	5, // 2: c1.config.v1.RepeatedRules.string:type_name -> c1.config.v1.StringRules
	5, // 3: c1.config.v1.RepeatedStringRules.item_rules:type_name -> c1.config.v1.StringRules
	0, // 4: c1.config.v1.StringRules.well_known:type_name -> c1.config.v1.WellKnownString
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_c1_config_v1_rules_proto_init() }
func file_c1_config_v1_rules_proto_init() {
	if File_c1_config_v1_rules_proto != nil {
		return
	}
	file_c1_config_v1_rules_proto_msgTypes[0].OneofWrappers = []any{}
	file_c1_config_v1_rules_proto_msgTypes[1].OneofWrappers = []any{}
	file_c1_config_v1_rules_proto_msgTypes[2].OneofWrappers = []any{
		(*RepeatedRules_Int64)(nil),
		(*RepeatedRules_Bool)(nil),
		(*RepeatedRules_String_)(nil),
	}
	file_c1_config_v1_rules_proto_msgTypes[3].OneofWrappers = []any{}
	file_c1_config_v1_rules_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_c1_config_v1_rules_proto_rawDesc), len(file_c1_config_v1_rules_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_c1_config_v1_rules_proto_goTypes,
		DependencyIndexes: file_c1_config_v1_rules_proto_depIdxs,
		EnumInfos:         file_c1_config_v1_rules_proto_enumTypes,
		MessageInfos:      file_c1_config_v1_rules_proto_msgTypes,
	}.Build()
	File_c1_config_v1_rules_proto = out.File
	file_c1_config_v1_rules_proto_goTypes = nil
	file_c1_config_v1_rules_proto_depIdxs = nil
}
