// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/ratelimit/v1/ratelimit.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/conductorone/baton-sdk/pb/c1/ratelimit/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RateLimiterServiceName is the fully-qualified name of the RateLimiterService service.
	RateLimiterServiceName = "c1.ratelimit.v1.RateLimiterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RateLimiterServiceDoProcedure is the fully-qualified name of the RateLimiterService's Do RPC.
	RateLimiterServiceDoProcedure = "/c1.ratelimit.v1.RateLimiterService/Do"
	// RateLimiterServiceReportProcedure is the fully-qualified name of the RateLimiterService's Report
	// RPC.
	RateLimiterServiceReportProcedure = "/c1.ratelimit.v1.RateLimiterService/Report"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	rateLimiterServiceServiceDescriptor      = v1.File_c1_ratelimit_v1_ratelimit_proto.Services().ByName("RateLimiterService")
	rateLimiterServiceDoMethodDescriptor     = rateLimiterServiceServiceDescriptor.Methods().ByName("Do")
	rateLimiterServiceReportMethodDescriptor = rateLimiterServiceServiceDescriptor.Methods().ByName("Report")
)

// RateLimiterServiceClient is a client for the c1.ratelimit.v1.RateLimiterService service.
type RateLimiterServiceClient interface {
	Do(context.Context, *connect.Request[v1.DoRequest]) (*connect.Response[v1.DoResponse], error)
	Report(context.Context, *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error)
}

// NewRateLimiterServiceClient constructs a client for the c1.ratelimit.v1.RateLimiterService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRateLimiterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RateLimiterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rateLimiterServiceClient{
		do: connect.NewClient[v1.DoRequest, v1.DoResponse](
			httpClient,
			baseURL+RateLimiterServiceDoProcedure,
			connect.WithSchema(rateLimiterServiceDoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		report: connect.NewClient[v1.ReportRequest, v1.ReportResponse](
			httpClient,
			baseURL+RateLimiterServiceReportProcedure,
			connect.WithSchema(rateLimiterServiceReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// rateLimiterServiceClient implements RateLimiterServiceClient.
type rateLimiterServiceClient struct {
	do     *connect.Client[v1.DoRequest, v1.DoResponse]
	report *connect.Client[v1.ReportRequest, v1.ReportResponse]
}

// Do calls c1.ratelimit.v1.RateLimiterService.Do.
func (c *rateLimiterServiceClient) Do(ctx context.Context, req *connect.Request[v1.DoRequest]) (*connect.Response[v1.DoResponse], error) {
	return c.do.CallUnary(ctx, req)
}

// Report calls c1.ratelimit.v1.RateLimiterService.Report.
func (c *rateLimiterServiceClient) Report(ctx context.Context, req *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error) {
	return c.report.CallUnary(ctx, req)
}

// RateLimiterServiceHandler is an implementation of the c1.ratelimit.v1.RateLimiterService service.
type RateLimiterServiceHandler interface {
	Do(context.Context, *connect.Request[v1.DoRequest]) (*connect.Response[v1.DoResponse], error)
	Report(context.Context, *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error)
}

// NewRateLimiterServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRateLimiterServiceHandler(svc RateLimiterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rateLimiterServiceDoHandler := connect.NewUnaryHandler(
		RateLimiterServiceDoProcedure,
		svc.Do,
		connect.WithSchema(rateLimiterServiceDoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rateLimiterServiceReportHandler := connect.NewUnaryHandler(
		RateLimiterServiceReportProcedure,
		svc.Report,
		connect.WithSchema(rateLimiterServiceReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.ratelimit.v1.RateLimiterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RateLimiterServiceDoProcedure:
			rateLimiterServiceDoHandler.ServeHTTP(w, r)
		case RateLimiterServiceReportProcedure:
			rateLimiterServiceReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRateLimiterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRateLimiterServiceHandler struct{}

func (UnimplementedRateLimiterServiceHandler) Do(context.Context, *connect.Request[v1.DoRequest]) (*connect.Response[v1.DoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.ratelimit.v1.RateLimiterService.Do is not implemented"))
}

func (UnimplementedRateLimiterServiceHandler) Report(context.Context, *connect.Request[v1.ReportRequest]) (*connect.Response[v1.ReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.ratelimit.v1.RateLimiterService.Report is not implemented"))
}
