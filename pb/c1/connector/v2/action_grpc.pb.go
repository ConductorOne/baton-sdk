// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connector/v2/action.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActionService_Invoke_FullMethodName      = "/c1.connector.v2.ActionService/Invoke"
	ActionService_Status_FullMethodName      = "/c1.connector.v2.ActionService/Status"
	ActionService_GetSchema_FullMethodName   = "/c1.connector.v2.ActionService/GetSchema"
	ActionService_ListSchemas_FullMethodName = "/c1.connector.v2.ActionService/ListSchemas"
)

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServiceClient interface {
	Invoke(ctx context.Context, in *ActionServiceInvokeRequest, opts ...grpc.CallOption) (*ActionServiceInvokeResponse, error)
	Status(ctx context.Context, in *ActionServiceStatusRequest, opts ...grpc.CallOption) (*ActionServiceStatusResponse, error)
	GetSchema(ctx context.Context, in *ActionServiceGetSchemaRequest, opts ...grpc.CallOption) (*ActionServiceGetSchemaResponse, error)
	ListSchemas(ctx context.Context, in *ActionServiceListSchemasRequest, opts ...grpc.CallOption) (*ActionServiceListSchemasResponse, error)
}

type actionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServiceClient(cc grpc.ClientConnInterface) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) Invoke(ctx context.Context, in *ActionServiceInvokeRequest, opts ...grpc.CallOption) (*ActionServiceInvokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionServiceInvokeResponse)
	err := c.cc.Invoke(ctx, ActionService_Invoke_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Status(ctx context.Context, in *ActionServiceStatusRequest, opts ...grpc.CallOption) (*ActionServiceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionServiceStatusResponse)
	err := c.cc.Invoke(ctx, ActionService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetSchema(ctx context.Context, in *ActionServiceGetSchemaRequest, opts ...grpc.CallOption) (*ActionServiceGetSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionServiceGetSchemaResponse)
	err := c.cc.Invoke(ctx, ActionService_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) ListSchemas(ctx context.Context, in *ActionServiceListSchemasRequest, opts ...grpc.CallOption) (*ActionServiceListSchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionServiceListSchemasResponse)
	err := c.cc.Invoke(ctx, ActionService_ListSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServiceServer is the server API for ActionService service.
// All implementations should embed UnimplementedActionServiceServer
// for forward compatibility.
type ActionServiceServer interface {
	Invoke(context.Context, *ActionServiceInvokeRequest) (*ActionServiceInvokeResponse, error)
	Status(context.Context, *ActionServiceStatusRequest) (*ActionServiceStatusResponse, error)
	GetSchema(context.Context, *ActionServiceGetSchemaRequest) (*ActionServiceGetSchemaResponse, error)
	ListSchemas(context.Context, *ActionServiceListSchemasRequest) (*ActionServiceListSchemasResponse, error)
}

// UnimplementedActionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActionServiceServer struct{}

func (UnimplementedActionServiceServer) Invoke(context.Context, *ActionServiceInvokeRequest) (*ActionServiceInvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedActionServiceServer) Status(context.Context, *ActionServiceStatusRequest) (*ActionServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedActionServiceServer) GetSchema(context.Context, *ActionServiceGetSchemaRequest) (*ActionServiceGetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedActionServiceServer) ListSchemas(context.Context, *ActionServiceListSchemasRequest) (*ActionServiceListSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (UnimplementedActionServiceServer) testEmbeddedByValue() {}

// UnsafeActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServiceServer will
// result in compilation errors.
type UnsafeActionServiceServer interface {
	mustEmbedUnimplementedActionServiceServer()
}

func RegisterActionServiceServer(s grpc.ServiceRegistrar, srv ActionServiceServer) {
	// If the following call pancis, it indicates UnimplementedActionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActionService_ServiceDesc, srv)
}

func _ActionService_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionServiceInvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionService_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Invoke(ctx, req.(*ActionServiceInvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Status(ctx, req.(*ActionServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionServiceGetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetSchema(ctx, req.(*ActionServiceGetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionServiceListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionService_ListSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).ListSchemas(ctx, req.(*ActionServiceListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionService_ServiceDesc is the grpc.ServiceDesc for ActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _ActionService_Invoke_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ActionService_Status_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _ActionService_GetSchema_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _ActionService_ListSchemas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/action.proto",
}
