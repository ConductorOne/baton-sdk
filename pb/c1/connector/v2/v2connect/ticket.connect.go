// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/ticket.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TicketsServiceName is the fully-qualified name of the TicketsService service.
	TicketsServiceName = "c1.connector.v2.TicketsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TicketsServiceCreateTicketProcedure is the fully-qualified name of the TicketsService's
	// CreateTicket RPC.
	TicketsServiceCreateTicketProcedure = "/c1.connector.v2.TicketsService/CreateTicket"
	// TicketsServiceGetTicketProcedure is the fully-qualified name of the TicketsService's GetTicket
	// RPC.
	TicketsServiceGetTicketProcedure = "/c1.connector.v2.TicketsService/GetTicket"
	// TicketsServiceListTicketSchemasProcedure is the fully-qualified name of the TicketsService's
	// ListTicketSchemas RPC.
	TicketsServiceListTicketSchemasProcedure = "/c1.connector.v2.TicketsService/ListTicketSchemas"
	// TicketsServiceGetTicketSchemaProcedure is the fully-qualified name of the TicketsService's
	// GetTicketSchema RPC.
	TicketsServiceGetTicketSchemaProcedure = "/c1.connector.v2.TicketsService/GetTicketSchema"
	// TicketsServiceBulkCreateTicketsProcedure is the fully-qualified name of the TicketsService's
	// BulkCreateTickets RPC.
	TicketsServiceBulkCreateTicketsProcedure = "/c1.connector.v2.TicketsService/BulkCreateTickets"
	// TicketsServiceBulkGetTicketsProcedure is the fully-qualified name of the TicketsService's
	// BulkGetTickets RPC.
	TicketsServiceBulkGetTicketsProcedure = "/c1.connector.v2.TicketsService/BulkGetTickets"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ticketsServiceServiceDescriptor                 = v2.File_c1_connector_v2_ticket_proto.Services().ByName("TicketsService")
	ticketsServiceCreateTicketMethodDescriptor      = ticketsServiceServiceDescriptor.Methods().ByName("CreateTicket")
	ticketsServiceGetTicketMethodDescriptor         = ticketsServiceServiceDescriptor.Methods().ByName("GetTicket")
	ticketsServiceListTicketSchemasMethodDescriptor = ticketsServiceServiceDescriptor.Methods().ByName("ListTicketSchemas")
	ticketsServiceGetTicketSchemaMethodDescriptor   = ticketsServiceServiceDescriptor.Methods().ByName("GetTicketSchema")
	ticketsServiceBulkCreateTicketsMethodDescriptor = ticketsServiceServiceDescriptor.Methods().ByName("BulkCreateTickets")
	ticketsServiceBulkGetTicketsMethodDescriptor    = ticketsServiceServiceDescriptor.Methods().ByName("BulkGetTickets")
)

// TicketsServiceClient is a client for the c1.connector.v2.TicketsService service.
type TicketsServiceClient interface {
	CreateTicket(context.Context, *connect.Request[v2.TicketsServiceCreateTicketRequest]) (*connect.Response[v2.TicketsServiceCreateTicketResponse], error)
	GetTicket(context.Context, *connect.Request[v2.TicketsServiceGetTicketRequest]) (*connect.Response[v2.TicketsServiceGetTicketResponse], error)
	ListTicketSchemas(context.Context, *connect.Request[v2.TicketsServiceListTicketSchemasRequest]) (*connect.Response[v2.TicketsServiceListTicketSchemasResponse], error)
	GetTicketSchema(context.Context, *connect.Request[v2.TicketsServiceGetTicketSchemaRequest]) (*connect.Response[v2.TicketsServiceGetTicketSchemaResponse], error)
	BulkCreateTickets(context.Context, *connect.Request[v2.TicketsServiceBulkCreateTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkCreateTicketsResponse], error)
	BulkGetTickets(context.Context, *connect.Request[v2.TicketsServiceBulkGetTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkGetTicketsResponse], error)
}

// NewTicketsServiceClient constructs a client for the c1.connector.v2.TicketsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTicketsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TicketsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ticketsServiceClient{
		createTicket: connect.NewClient[v2.TicketsServiceCreateTicketRequest, v2.TicketsServiceCreateTicketResponse](
			httpClient,
			baseURL+TicketsServiceCreateTicketProcedure,
			connect.WithSchema(ticketsServiceCreateTicketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTicket: connect.NewClient[v2.TicketsServiceGetTicketRequest, v2.TicketsServiceGetTicketResponse](
			httpClient,
			baseURL+TicketsServiceGetTicketProcedure,
			connect.WithSchema(ticketsServiceGetTicketMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTicketSchemas: connect.NewClient[v2.TicketsServiceListTicketSchemasRequest, v2.TicketsServiceListTicketSchemasResponse](
			httpClient,
			baseURL+TicketsServiceListTicketSchemasProcedure,
			connect.WithSchema(ticketsServiceListTicketSchemasMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTicketSchema: connect.NewClient[v2.TicketsServiceGetTicketSchemaRequest, v2.TicketsServiceGetTicketSchemaResponse](
			httpClient,
			baseURL+TicketsServiceGetTicketSchemaProcedure,
			connect.WithSchema(ticketsServiceGetTicketSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bulkCreateTickets: connect.NewClient[v2.TicketsServiceBulkCreateTicketsRequest, v2.TicketsServiceBulkCreateTicketsResponse](
			httpClient,
			baseURL+TicketsServiceBulkCreateTicketsProcedure,
			connect.WithSchema(ticketsServiceBulkCreateTicketsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		bulkGetTickets: connect.NewClient[v2.TicketsServiceBulkGetTicketsRequest, v2.TicketsServiceBulkGetTicketsResponse](
			httpClient,
			baseURL+TicketsServiceBulkGetTicketsProcedure,
			connect.WithSchema(ticketsServiceBulkGetTicketsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ticketsServiceClient implements TicketsServiceClient.
type ticketsServiceClient struct {
	createTicket      *connect.Client[v2.TicketsServiceCreateTicketRequest, v2.TicketsServiceCreateTicketResponse]
	getTicket         *connect.Client[v2.TicketsServiceGetTicketRequest, v2.TicketsServiceGetTicketResponse]
	listTicketSchemas *connect.Client[v2.TicketsServiceListTicketSchemasRequest, v2.TicketsServiceListTicketSchemasResponse]
	getTicketSchema   *connect.Client[v2.TicketsServiceGetTicketSchemaRequest, v2.TicketsServiceGetTicketSchemaResponse]
	bulkCreateTickets *connect.Client[v2.TicketsServiceBulkCreateTicketsRequest, v2.TicketsServiceBulkCreateTicketsResponse]
	bulkGetTickets    *connect.Client[v2.TicketsServiceBulkGetTicketsRequest, v2.TicketsServiceBulkGetTicketsResponse]
}

// CreateTicket calls c1.connector.v2.TicketsService.CreateTicket.
func (c *ticketsServiceClient) CreateTicket(ctx context.Context, req *connect.Request[v2.TicketsServiceCreateTicketRequest]) (*connect.Response[v2.TicketsServiceCreateTicketResponse], error) {
	return c.createTicket.CallUnary(ctx, req)
}

// GetTicket calls c1.connector.v2.TicketsService.GetTicket.
func (c *ticketsServiceClient) GetTicket(ctx context.Context, req *connect.Request[v2.TicketsServiceGetTicketRequest]) (*connect.Response[v2.TicketsServiceGetTicketResponse], error) {
	return c.getTicket.CallUnary(ctx, req)
}

// ListTicketSchemas calls c1.connector.v2.TicketsService.ListTicketSchemas.
func (c *ticketsServiceClient) ListTicketSchemas(ctx context.Context, req *connect.Request[v2.TicketsServiceListTicketSchemasRequest]) (*connect.Response[v2.TicketsServiceListTicketSchemasResponse], error) {
	return c.listTicketSchemas.CallUnary(ctx, req)
}

// GetTicketSchema calls c1.connector.v2.TicketsService.GetTicketSchema.
func (c *ticketsServiceClient) GetTicketSchema(ctx context.Context, req *connect.Request[v2.TicketsServiceGetTicketSchemaRequest]) (*connect.Response[v2.TicketsServiceGetTicketSchemaResponse], error) {
	return c.getTicketSchema.CallUnary(ctx, req)
}

// BulkCreateTickets calls c1.connector.v2.TicketsService.BulkCreateTickets.
func (c *ticketsServiceClient) BulkCreateTickets(ctx context.Context, req *connect.Request[v2.TicketsServiceBulkCreateTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkCreateTicketsResponse], error) {
	return c.bulkCreateTickets.CallUnary(ctx, req)
}

// BulkGetTickets calls c1.connector.v2.TicketsService.BulkGetTickets.
func (c *ticketsServiceClient) BulkGetTickets(ctx context.Context, req *connect.Request[v2.TicketsServiceBulkGetTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkGetTicketsResponse], error) {
	return c.bulkGetTickets.CallUnary(ctx, req)
}

// TicketsServiceHandler is an implementation of the c1.connector.v2.TicketsService service.
type TicketsServiceHandler interface {
	CreateTicket(context.Context, *connect.Request[v2.TicketsServiceCreateTicketRequest]) (*connect.Response[v2.TicketsServiceCreateTicketResponse], error)
	GetTicket(context.Context, *connect.Request[v2.TicketsServiceGetTicketRequest]) (*connect.Response[v2.TicketsServiceGetTicketResponse], error)
	ListTicketSchemas(context.Context, *connect.Request[v2.TicketsServiceListTicketSchemasRequest]) (*connect.Response[v2.TicketsServiceListTicketSchemasResponse], error)
	GetTicketSchema(context.Context, *connect.Request[v2.TicketsServiceGetTicketSchemaRequest]) (*connect.Response[v2.TicketsServiceGetTicketSchemaResponse], error)
	BulkCreateTickets(context.Context, *connect.Request[v2.TicketsServiceBulkCreateTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkCreateTicketsResponse], error)
	BulkGetTickets(context.Context, *connect.Request[v2.TicketsServiceBulkGetTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkGetTicketsResponse], error)
}

// NewTicketsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTicketsServiceHandler(svc TicketsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ticketsServiceCreateTicketHandler := connect.NewUnaryHandler(
		TicketsServiceCreateTicketProcedure,
		svc.CreateTicket,
		connect.WithSchema(ticketsServiceCreateTicketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ticketsServiceGetTicketHandler := connect.NewUnaryHandler(
		TicketsServiceGetTicketProcedure,
		svc.GetTicket,
		connect.WithSchema(ticketsServiceGetTicketMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ticketsServiceListTicketSchemasHandler := connect.NewUnaryHandler(
		TicketsServiceListTicketSchemasProcedure,
		svc.ListTicketSchemas,
		connect.WithSchema(ticketsServiceListTicketSchemasMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ticketsServiceGetTicketSchemaHandler := connect.NewUnaryHandler(
		TicketsServiceGetTicketSchemaProcedure,
		svc.GetTicketSchema,
		connect.WithSchema(ticketsServiceGetTicketSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ticketsServiceBulkCreateTicketsHandler := connect.NewUnaryHandler(
		TicketsServiceBulkCreateTicketsProcedure,
		svc.BulkCreateTickets,
		connect.WithSchema(ticketsServiceBulkCreateTicketsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ticketsServiceBulkGetTicketsHandler := connect.NewUnaryHandler(
		TicketsServiceBulkGetTicketsProcedure,
		svc.BulkGetTickets,
		connect.WithSchema(ticketsServiceBulkGetTicketsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.TicketsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TicketsServiceCreateTicketProcedure:
			ticketsServiceCreateTicketHandler.ServeHTTP(w, r)
		case TicketsServiceGetTicketProcedure:
			ticketsServiceGetTicketHandler.ServeHTTP(w, r)
		case TicketsServiceListTicketSchemasProcedure:
			ticketsServiceListTicketSchemasHandler.ServeHTTP(w, r)
		case TicketsServiceGetTicketSchemaProcedure:
			ticketsServiceGetTicketSchemaHandler.ServeHTTP(w, r)
		case TicketsServiceBulkCreateTicketsProcedure:
			ticketsServiceBulkCreateTicketsHandler.ServeHTTP(w, r)
		case TicketsServiceBulkGetTicketsProcedure:
			ticketsServiceBulkGetTicketsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTicketsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTicketsServiceHandler struct{}

func (UnimplementedTicketsServiceHandler) CreateTicket(context.Context, *connect.Request[v2.TicketsServiceCreateTicketRequest]) (*connect.Response[v2.TicketsServiceCreateTicketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.TicketsService.CreateTicket is not implemented"))
}

func (UnimplementedTicketsServiceHandler) GetTicket(context.Context, *connect.Request[v2.TicketsServiceGetTicketRequest]) (*connect.Response[v2.TicketsServiceGetTicketResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.TicketsService.GetTicket is not implemented"))
}

func (UnimplementedTicketsServiceHandler) ListTicketSchemas(context.Context, *connect.Request[v2.TicketsServiceListTicketSchemasRequest]) (*connect.Response[v2.TicketsServiceListTicketSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.TicketsService.ListTicketSchemas is not implemented"))
}

func (UnimplementedTicketsServiceHandler) GetTicketSchema(context.Context, *connect.Request[v2.TicketsServiceGetTicketSchemaRequest]) (*connect.Response[v2.TicketsServiceGetTicketSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.TicketsService.GetTicketSchema is not implemented"))
}

func (UnimplementedTicketsServiceHandler) BulkCreateTickets(context.Context, *connect.Request[v2.TicketsServiceBulkCreateTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkCreateTicketsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.TicketsService.BulkCreateTickets is not implemented"))
}

func (UnimplementedTicketsServiceHandler) BulkGetTickets(context.Context, *connect.Request[v2.TicketsServiceBulkGetTicketsRequest]) (*connect.Response[v2.TicketsServiceBulkGetTicketsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.TicketsService.BulkGetTickets is not implemented"))
}
