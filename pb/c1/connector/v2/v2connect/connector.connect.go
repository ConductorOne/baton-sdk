// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/connector.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConnectorServiceName is the fully-qualified name of the ConnectorService service.
	ConnectorServiceName = "c1.connector.v2.ConnectorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectorServiceGetMetadataProcedure is the fully-qualified name of the ConnectorService's
	// GetMetadata RPC.
	ConnectorServiceGetMetadataProcedure = "/c1.connector.v2.ConnectorService/GetMetadata"
	// ConnectorServiceValidateProcedure is the fully-qualified name of the ConnectorService's Validate
	// RPC.
	ConnectorServiceValidateProcedure = "/c1.connector.v2.ConnectorService/Validate"
	// ConnectorServiceCleanupProcedure is the fully-qualified name of the ConnectorService's Cleanup
	// RPC.
	ConnectorServiceCleanupProcedure = "/c1.connector.v2.ConnectorService/Cleanup"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	connectorServiceServiceDescriptor           = v2.File_c1_connector_v2_connector_proto.Services().ByName("ConnectorService")
	connectorServiceGetMetadataMethodDescriptor = connectorServiceServiceDescriptor.Methods().ByName("GetMetadata")
	connectorServiceValidateMethodDescriptor    = connectorServiceServiceDescriptor.Methods().ByName("Validate")
	connectorServiceCleanupMethodDescriptor     = connectorServiceServiceDescriptor.Methods().ByName("Cleanup")
)

// ConnectorServiceClient is a client for the c1.connector.v2.ConnectorService service.
type ConnectorServiceClient interface {
	GetMetadata(context.Context, *connect.Request[v2.ConnectorServiceGetMetadataRequest]) (*connect.Response[v2.ConnectorServiceGetMetadataResponse], error)
	Validate(context.Context, *connect.Request[v2.ConnectorServiceValidateRequest]) (*connect.Response[v2.ConnectorServiceValidateResponse], error)
	Cleanup(context.Context, *connect.Request[v2.ConnectorServiceCleanupRequest]) (*connect.Response[v2.ConnectorServiceCleanupResponse], error)
}

// NewConnectorServiceClient constructs a client for the c1.connector.v2.ConnectorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectorServiceClient{
		getMetadata: connect.NewClient[v2.ConnectorServiceGetMetadataRequest, v2.ConnectorServiceGetMetadataResponse](
			httpClient,
			baseURL+ConnectorServiceGetMetadataProcedure,
			connect.WithSchema(connectorServiceGetMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validate: connect.NewClient[v2.ConnectorServiceValidateRequest, v2.ConnectorServiceValidateResponse](
			httpClient,
			baseURL+ConnectorServiceValidateProcedure,
			connect.WithSchema(connectorServiceValidateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cleanup: connect.NewClient[v2.ConnectorServiceCleanupRequest, v2.ConnectorServiceCleanupResponse](
			httpClient,
			baseURL+ConnectorServiceCleanupProcedure,
			connect.WithSchema(connectorServiceCleanupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectorServiceClient implements ConnectorServiceClient.
type connectorServiceClient struct {
	getMetadata *connect.Client[v2.ConnectorServiceGetMetadataRequest, v2.ConnectorServiceGetMetadataResponse]
	validate    *connect.Client[v2.ConnectorServiceValidateRequest, v2.ConnectorServiceValidateResponse]
	cleanup     *connect.Client[v2.ConnectorServiceCleanupRequest, v2.ConnectorServiceCleanupResponse]
}

// GetMetadata calls c1.connector.v2.ConnectorService.GetMetadata.
func (c *connectorServiceClient) GetMetadata(ctx context.Context, req *connect.Request[v2.ConnectorServiceGetMetadataRequest]) (*connect.Response[v2.ConnectorServiceGetMetadataResponse], error) {
	return c.getMetadata.CallUnary(ctx, req)
}

// Validate calls c1.connector.v2.ConnectorService.Validate.
func (c *connectorServiceClient) Validate(ctx context.Context, req *connect.Request[v2.ConnectorServiceValidateRequest]) (*connect.Response[v2.ConnectorServiceValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// Cleanup calls c1.connector.v2.ConnectorService.Cleanup.
func (c *connectorServiceClient) Cleanup(ctx context.Context, req *connect.Request[v2.ConnectorServiceCleanupRequest]) (*connect.Response[v2.ConnectorServiceCleanupResponse], error) {
	return c.cleanup.CallUnary(ctx, req)
}

// ConnectorServiceHandler is an implementation of the c1.connector.v2.ConnectorService service.
type ConnectorServiceHandler interface {
	GetMetadata(context.Context, *connect.Request[v2.ConnectorServiceGetMetadataRequest]) (*connect.Response[v2.ConnectorServiceGetMetadataResponse], error)
	Validate(context.Context, *connect.Request[v2.ConnectorServiceValidateRequest]) (*connect.Response[v2.ConnectorServiceValidateResponse], error)
	Cleanup(context.Context, *connect.Request[v2.ConnectorServiceCleanupRequest]) (*connect.Response[v2.ConnectorServiceCleanupResponse], error)
}

// NewConnectorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectorServiceHandler(svc ConnectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectorServiceGetMetadataHandler := connect.NewUnaryHandler(
		ConnectorServiceGetMetadataProcedure,
		svc.GetMetadata,
		connect.WithSchema(connectorServiceGetMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	connectorServiceValidateHandler := connect.NewUnaryHandler(
		ConnectorServiceValidateProcedure,
		svc.Validate,
		connect.WithSchema(connectorServiceValidateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	connectorServiceCleanupHandler := connect.NewUnaryHandler(
		ConnectorServiceCleanupProcedure,
		svc.Cleanup,
		connect.WithSchema(connectorServiceCleanupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.ConnectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectorServiceGetMetadataProcedure:
			connectorServiceGetMetadataHandler.ServeHTTP(w, r)
		case ConnectorServiceValidateProcedure:
			connectorServiceValidateHandler.ServeHTTP(w, r)
		case ConnectorServiceCleanupProcedure:
			connectorServiceCleanupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectorServiceHandler struct{}

func (UnimplementedConnectorServiceHandler) GetMetadata(context.Context, *connect.Request[v2.ConnectorServiceGetMetadataRequest]) (*connect.Response[v2.ConnectorServiceGetMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ConnectorService.GetMetadata is not implemented"))
}

func (UnimplementedConnectorServiceHandler) Validate(context.Context, *connect.Request[v2.ConnectorServiceValidateRequest]) (*connect.Response[v2.ConnectorServiceValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ConnectorService.Validate is not implemented"))
}

func (UnimplementedConnectorServiceHandler) Cleanup(context.Context, *connect.Request[v2.ConnectorServiceCleanupRequest]) (*connect.Response[v2.ConnectorServiceCleanupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ConnectorService.Cleanup is not implemented"))
}
