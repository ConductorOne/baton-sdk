// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/config.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SchemaServiceName is the fully-qualified name of the SchemaService service.
	SchemaServiceName = "c1.connector.v2.SchemaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchemaServiceGetSchemaProcedure is the fully-qualified name of the SchemaService's GetSchema RPC.
	SchemaServiceGetSchemaProcedure = "/c1.connector.v2.SchemaService/GetSchema"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	schemaServiceServiceDescriptor         = v2.File_c1_connector_v2_config_proto.Services().ByName("SchemaService")
	schemaServiceGetSchemaMethodDescriptor = schemaServiceServiceDescriptor.Methods().ByName("GetSchema")
)

// SchemaServiceClient is a client for the c1.connector.v2.SchemaService service.
type SchemaServiceClient interface {
	GetSchema(context.Context, *connect.Request[v2.SchemaServiceGetSchemaRequest]) (*connect.Response[v2.SchemaServiceGetSchemaResponse], error)
}

// NewSchemaServiceClient constructs a client for the c1.connector.v2.SchemaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchemaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchemaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schemaServiceClient{
		getSchema: connect.NewClient[v2.SchemaServiceGetSchemaRequest, v2.SchemaServiceGetSchemaResponse](
			httpClient,
			baseURL+SchemaServiceGetSchemaProcedure,
			connect.WithSchema(schemaServiceGetSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// schemaServiceClient implements SchemaServiceClient.
type schemaServiceClient struct {
	getSchema *connect.Client[v2.SchemaServiceGetSchemaRequest, v2.SchemaServiceGetSchemaResponse]
}

// GetSchema calls c1.connector.v2.SchemaService.GetSchema.
func (c *schemaServiceClient) GetSchema(ctx context.Context, req *connect.Request[v2.SchemaServiceGetSchemaRequest]) (*connect.Response[v2.SchemaServiceGetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// SchemaServiceHandler is an implementation of the c1.connector.v2.SchemaService service.
type SchemaServiceHandler interface {
	GetSchema(context.Context, *connect.Request[v2.SchemaServiceGetSchemaRequest]) (*connect.Response[v2.SchemaServiceGetSchemaResponse], error)
}

// NewSchemaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchemaServiceHandler(svc SchemaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schemaServiceGetSchemaHandler := connect.NewUnaryHandler(
		SchemaServiceGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(schemaServiceGetSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.SchemaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchemaServiceGetSchemaProcedure:
			schemaServiceGetSchemaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchemaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSchemaServiceHandler struct{}

func (UnimplementedSchemaServiceHandler) GetSchema(context.Context, *connect.Request[v2.SchemaServiceGetSchemaRequest]) (*connect.Response[v2.SchemaServiceGetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.SchemaService.GetSchema is not implemented"))
}
