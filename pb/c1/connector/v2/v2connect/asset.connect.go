// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/asset.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssetServiceName is the fully-qualified name of the AssetService service.
	AssetServiceName = "c1.connector.v2.AssetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssetServiceGetAssetProcedure is the fully-qualified name of the AssetService's GetAsset RPC.
	AssetServiceGetAssetProcedure = "/c1.connector.v2.AssetService/GetAsset"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	assetServiceServiceDescriptor        = v2.File_c1_connector_v2_asset_proto.Services().ByName("AssetService")
	assetServiceGetAssetMethodDescriptor = assetServiceServiceDescriptor.Methods().ByName("GetAsset")
)

// AssetServiceClient is a client for the c1.connector.v2.AssetService service.
type AssetServiceClient interface {
	GetAsset(context.Context, *connect.Request[v2.AssetServiceGetAssetRequest]) (*connect.ServerStreamForClient[v2.AssetServiceGetAssetResponse], error)
}

// NewAssetServiceClient constructs a client for the c1.connector.v2.AssetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &assetServiceClient{
		getAsset: connect.NewClient[v2.AssetServiceGetAssetRequest, v2.AssetServiceGetAssetResponse](
			httpClient,
			baseURL+AssetServiceGetAssetProcedure,
			connect.WithSchema(assetServiceGetAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// assetServiceClient implements AssetServiceClient.
type assetServiceClient struct {
	getAsset *connect.Client[v2.AssetServiceGetAssetRequest, v2.AssetServiceGetAssetResponse]
}

// GetAsset calls c1.connector.v2.AssetService.GetAsset.
func (c *assetServiceClient) GetAsset(ctx context.Context, req *connect.Request[v2.AssetServiceGetAssetRequest]) (*connect.ServerStreamForClient[v2.AssetServiceGetAssetResponse], error) {
	return c.getAsset.CallServerStream(ctx, req)
}

// AssetServiceHandler is an implementation of the c1.connector.v2.AssetService service.
type AssetServiceHandler interface {
	GetAsset(context.Context, *connect.Request[v2.AssetServiceGetAssetRequest], *connect.ServerStream[v2.AssetServiceGetAssetResponse]) error
}

// NewAssetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssetServiceHandler(svc AssetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assetServiceGetAssetHandler := connect.NewServerStreamHandler(
		AssetServiceGetAssetProcedure,
		svc.GetAsset,
		connect.WithSchema(assetServiceGetAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.AssetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssetServiceGetAssetProcedure:
			assetServiceGetAssetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAssetServiceHandler struct{}

func (UnimplementedAssetServiceHandler) GetAsset(context.Context, *connect.Request[v2.AssetServiceGetAssetRequest], *connect.ServerStream[v2.AssetServiceGetAssetResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.AssetService.GetAsset is not implemented"))
}
