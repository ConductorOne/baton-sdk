// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/resource.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ResourceTypesServiceName is the fully-qualified name of the ResourceTypesService service.
	ResourceTypesServiceName = "c1.connector.v2.ResourceTypesService"
	// ResourcesServiceName is the fully-qualified name of the ResourcesService service.
	ResourcesServiceName = "c1.connector.v2.ResourcesService"
	// ResourceManagerServiceName is the fully-qualified name of the ResourceManagerService service.
	ResourceManagerServiceName = "c1.connector.v2.ResourceManagerService"
	// CredentialManagerServiceName is the fully-qualified name of the CredentialManagerService service.
	CredentialManagerServiceName = "c1.connector.v2.CredentialManagerService"
	// AccountManagerServiceName is the fully-qualified name of the AccountManagerService service.
	AccountManagerServiceName = "c1.connector.v2.AccountManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ResourceTypesServiceListResourceTypesProcedure is the fully-qualified name of the
	// ResourceTypesService's ListResourceTypes RPC.
	ResourceTypesServiceListResourceTypesProcedure = "/c1.connector.v2.ResourceTypesService/ListResourceTypes"
	// ResourcesServiceListResourcesProcedure is the fully-qualified name of the ResourcesService's
	// ListResources RPC.
	ResourcesServiceListResourcesProcedure = "/c1.connector.v2.ResourcesService/ListResources"
	// ResourceManagerServiceCreateResourceProcedure is the fully-qualified name of the
	// ResourceManagerService's CreateResource RPC.
	ResourceManagerServiceCreateResourceProcedure = "/c1.connector.v2.ResourceManagerService/CreateResource"
	// ResourceManagerServiceDeleteResourceProcedure is the fully-qualified name of the
	// ResourceManagerService's DeleteResource RPC.
	ResourceManagerServiceDeleteResourceProcedure = "/c1.connector.v2.ResourceManagerService/DeleteResource"
	// CredentialManagerServiceRotateCredentialProcedure is the fully-qualified name of the
	// CredentialManagerService's RotateCredential RPC.
	CredentialManagerServiceRotateCredentialProcedure = "/c1.connector.v2.CredentialManagerService/RotateCredential"
	// AccountManagerServiceCreateAccountProcedure is the fully-qualified name of the
	// AccountManagerService's CreateAccount RPC.
	AccountManagerServiceCreateAccountProcedure = "/c1.connector.v2.AccountManagerService/CreateAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	resourceTypesServiceServiceDescriptor                    = v2.File_c1_connector_v2_resource_proto.Services().ByName("ResourceTypesService")
	resourceTypesServiceListResourceTypesMethodDescriptor    = resourceTypesServiceServiceDescriptor.Methods().ByName("ListResourceTypes")
	resourcesServiceServiceDescriptor                        = v2.File_c1_connector_v2_resource_proto.Services().ByName("ResourcesService")
	resourcesServiceListResourcesMethodDescriptor            = resourcesServiceServiceDescriptor.Methods().ByName("ListResources")
	resourceManagerServiceServiceDescriptor                  = v2.File_c1_connector_v2_resource_proto.Services().ByName("ResourceManagerService")
	resourceManagerServiceCreateResourceMethodDescriptor     = resourceManagerServiceServiceDescriptor.Methods().ByName("CreateResource")
	resourceManagerServiceDeleteResourceMethodDescriptor     = resourceManagerServiceServiceDescriptor.Methods().ByName("DeleteResource")
	credentialManagerServiceServiceDescriptor                = v2.File_c1_connector_v2_resource_proto.Services().ByName("CredentialManagerService")
	credentialManagerServiceRotateCredentialMethodDescriptor = credentialManagerServiceServiceDescriptor.Methods().ByName("RotateCredential")
	accountManagerServiceServiceDescriptor                   = v2.File_c1_connector_v2_resource_proto.Services().ByName("AccountManagerService")
	accountManagerServiceCreateAccountMethodDescriptor       = accountManagerServiceServiceDescriptor.Methods().ByName("CreateAccount")
)

// ResourceTypesServiceClient is a client for the c1.connector.v2.ResourceTypesService service.
type ResourceTypesServiceClient interface {
	ListResourceTypes(context.Context, *connect.Request[v2.ResourceTypesServiceListResourceTypesRequest]) (*connect.Response[v2.ResourceTypesServiceListResourceTypesResponse], error)
}

// NewResourceTypesServiceClient constructs a client for the c1.connector.v2.ResourceTypesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourceTypesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResourceTypesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourceTypesServiceClient{
		listResourceTypes: connect.NewClient[v2.ResourceTypesServiceListResourceTypesRequest, v2.ResourceTypesServiceListResourceTypesResponse](
			httpClient,
			baseURL+ResourceTypesServiceListResourceTypesProcedure,
			connect.WithSchema(resourceTypesServiceListResourceTypesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// resourceTypesServiceClient implements ResourceTypesServiceClient.
type resourceTypesServiceClient struct {
	listResourceTypes *connect.Client[v2.ResourceTypesServiceListResourceTypesRequest, v2.ResourceTypesServiceListResourceTypesResponse]
}

// ListResourceTypes calls c1.connector.v2.ResourceTypesService.ListResourceTypes.
func (c *resourceTypesServiceClient) ListResourceTypes(ctx context.Context, req *connect.Request[v2.ResourceTypesServiceListResourceTypesRequest]) (*connect.Response[v2.ResourceTypesServiceListResourceTypesResponse], error) {
	return c.listResourceTypes.CallUnary(ctx, req)
}

// ResourceTypesServiceHandler is an implementation of the c1.connector.v2.ResourceTypesService
// service.
type ResourceTypesServiceHandler interface {
	ListResourceTypes(context.Context, *connect.Request[v2.ResourceTypesServiceListResourceTypesRequest]) (*connect.Response[v2.ResourceTypesServiceListResourceTypesResponse], error)
}

// NewResourceTypesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourceTypesServiceHandler(svc ResourceTypesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	resourceTypesServiceListResourceTypesHandler := connect.NewUnaryHandler(
		ResourceTypesServiceListResourceTypesProcedure,
		svc.ListResourceTypes,
		connect.WithSchema(resourceTypesServiceListResourceTypesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.ResourceTypesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourceTypesServiceListResourceTypesProcedure:
			resourceTypesServiceListResourceTypesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourceTypesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourceTypesServiceHandler struct{}

func (UnimplementedResourceTypesServiceHandler) ListResourceTypes(context.Context, *connect.Request[v2.ResourceTypesServiceListResourceTypesRequest]) (*connect.Response[v2.ResourceTypesServiceListResourceTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ResourceTypesService.ListResourceTypes is not implemented"))
}

// ResourcesServiceClient is a client for the c1.connector.v2.ResourcesService service.
type ResourcesServiceClient interface {
	ListResources(context.Context, *connect.Request[v2.ResourcesServiceListResourcesRequest]) (*connect.Response[v2.ResourcesServiceListResourcesResponse], error)
}

// NewResourcesServiceClient constructs a client for the c1.connector.v2.ResourcesService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourcesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResourcesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourcesServiceClient{
		listResources: connect.NewClient[v2.ResourcesServiceListResourcesRequest, v2.ResourcesServiceListResourcesResponse](
			httpClient,
			baseURL+ResourcesServiceListResourcesProcedure,
			connect.WithSchema(resourcesServiceListResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// resourcesServiceClient implements ResourcesServiceClient.
type resourcesServiceClient struct {
	listResources *connect.Client[v2.ResourcesServiceListResourcesRequest, v2.ResourcesServiceListResourcesResponse]
}

// ListResources calls c1.connector.v2.ResourcesService.ListResources.
func (c *resourcesServiceClient) ListResources(ctx context.Context, req *connect.Request[v2.ResourcesServiceListResourcesRequest]) (*connect.Response[v2.ResourcesServiceListResourcesResponse], error) {
	return c.listResources.CallUnary(ctx, req)
}

// ResourcesServiceHandler is an implementation of the c1.connector.v2.ResourcesService service.
type ResourcesServiceHandler interface {
	ListResources(context.Context, *connect.Request[v2.ResourcesServiceListResourcesRequest]) (*connect.Response[v2.ResourcesServiceListResourcesResponse], error)
}

// NewResourcesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourcesServiceHandler(svc ResourcesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	resourcesServiceListResourcesHandler := connect.NewUnaryHandler(
		ResourcesServiceListResourcesProcedure,
		svc.ListResources,
		connect.WithSchema(resourcesServiceListResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.ResourcesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourcesServiceListResourcesProcedure:
			resourcesServiceListResourcesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourcesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourcesServiceHandler struct{}

func (UnimplementedResourcesServiceHandler) ListResources(context.Context, *connect.Request[v2.ResourcesServiceListResourcesRequest]) (*connect.Response[v2.ResourcesServiceListResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ResourcesService.ListResources is not implemented"))
}

// ResourceManagerServiceClient is a client for the c1.connector.v2.ResourceManagerService service.
type ResourceManagerServiceClient interface {
	CreateResource(context.Context, *connect.Request[v2.CreateResourceRequest]) (*connect.Response[v2.CreateResourceResponse], error)
	DeleteResource(context.Context, *connect.Request[v2.DeleteResourceRequest]) (*connect.Response[v2.DeleteResourceResponse], error)
}

// NewResourceManagerServiceClient constructs a client for the
// c1.connector.v2.ResourceManagerService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourceManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResourceManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourceManagerServiceClient{
		createResource: connect.NewClient[v2.CreateResourceRequest, v2.CreateResourceResponse](
			httpClient,
			baseURL+ResourceManagerServiceCreateResourceProcedure,
			connect.WithSchema(resourceManagerServiceCreateResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteResource: connect.NewClient[v2.DeleteResourceRequest, v2.DeleteResourceResponse](
			httpClient,
			baseURL+ResourceManagerServiceDeleteResourceProcedure,
			connect.WithSchema(resourceManagerServiceDeleteResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// resourceManagerServiceClient implements ResourceManagerServiceClient.
type resourceManagerServiceClient struct {
	createResource *connect.Client[v2.CreateResourceRequest, v2.CreateResourceResponse]
	deleteResource *connect.Client[v2.DeleteResourceRequest, v2.DeleteResourceResponse]
}

// CreateResource calls c1.connector.v2.ResourceManagerService.CreateResource.
func (c *resourceManagerServiceClient) CreateResource(ctx context.Context, req *connect.Request[v2.CreateResourceRequest]) (*connect.Response[v2.CreateResourceResponse], error) {
	return c.createResource.CallUnary(ctx, req)
}

// DeleteResource calls c1.connector.v2.ResourceManagerService.DeleteResource.
func (c *resourceManagerServiceClient) DeleteResource(ctx context.Context, req *connect.Request[v2.DeleteResourceRequest]) (*connect.Response[v2.DeleteResourceResponse], error) {
	return c.deleteResource.CallUnary(ctx, req)
}

// ResourceManagerServiceHandler is an implementation of the c1.connector.v2.ResourceManagerService
// service.
type ResourceManagerServiceHandler interface {
	CreateResource(context.Context, *connect.Request[v2.CreateResourceRequest]) (*connect.Response[v2.CreateResourceResponse], error)
	DeleteResource(context.Context, *connect.Request[v2.DeleteResourceRequest]) (*connect.Response[v2.DeleteResourceResponse], error)
}

// NewResourceManagerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourceManagerServiceHandler(svc ResourceManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	resourceManagerServiceCreateResourceHandler := connect.NewUnaryHandler(
		ResourceManagerServiceCreateResourceProcedure,
		svc.CreateResource,
		connect.WithSchema(resourceManagerServiceCreateResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	resourceManagerServiceDeleteResourceHandler := connect.NewUnaryHandler(
		ResourceManagerServiceDeleteResourceProcedure,
		svc.DeleteResource,
		connect.WithSchema(resourceManagerServiceDeleteResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.ResourceManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourceManagerServiceCreateResourceProcedure:
			resourceManagerServiceCreateResourceHandler.ServeHTTP(w, r)
		case ResourceManagerServiceDeleteResourceProcedure:
			resourceManagerServiceDeleteResourceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourceManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourceManagerServiceHandler struct{}

func (UnimplementedResourceManagerServiceHandler) CreateResource(context.Context, *connect.Request[v2.CreateResourceRequest]) (*connect.Response[v2.CreateResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ResourceManagerService.CreateResource is not implemented"))
}

func (UnimplementedResourceManagerServiceHandler) DeleteResource(context.Context, *connect.Request[v2.DeleteResourceRequest]) (*connect.Response[v2.DeleteResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.ResourceManagerService.DeleteResource is not implemented"))
}

// CredentialManagerServiceClient is a client for the c1.connector.v2.CredentialManagerService
// service.
type CredentialManagerServiceClient interface {
	RotateCredential(context.Context, *connect.Request[v2.RotateCredentialRequest]) (*connect.Response[v2.RotateCredentialResponse], error)
}

// NewCredentialManagerServiceClient constructs a client for the
// c1.connector.v2.CredentialManagerService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCredentialManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CredentialManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &credentialManagerServiceClient{
		rotateCredential: connect.NewClient[v2.RotateCredentialRequest, v2.RotateCredentialResponse](
			httpClient,
			baseURL+CredentialManagerServiceRotateCredentialProcedure,
			connect.WithSchema(credentialManagerServiceRotateCredentialMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// credentialManagerServiceClient implements CredentialManagerServiceClient.
type credentialManagerServiceClient struct {
	rotateCredential *connect.Client[v2.RotateCredentialRequest, v2.RotateCredentialResponse]
}

// RotateCredential calls c1.connector.v2.CredentialManagerService.RotateCredential.
func (c *credentialManagerServiceClient) RotateCredential(ctx context.Context, req *connect.Request[v2.RotateCredentialRequest]) (*connect.Response[v2.RotateCredentialResponse], error) {
	return c.rotateCredential.CallUnary(ctx, req)
}

// CredentialManagerServiceHandler is an implementation of the
// c1.connector.v2.CredentialManagerService service.
type CredentialManagerServiceHandler interface {
	RotateCredential(context.Context, *connect.Request[v2.RotateCredentialRequest]) (*connect.Response[v2.RotateCredentialResponse], error)
}

// NewCredentialManagerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCredentialManagerServiceHandler(svc CredentialManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	credentialManagerServiceRotateCredentialHandler := connect.NewUnaryHandler(
		CredentialManagerServiceRotateCredentialProcedure,
		svc.RotateCredential,
		connect.WithSchema(credentialManagerServiceRotateCredentialMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.CredentialManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CredentialManagerServiceRotateCredentialProcedure:
			credentialManagerServiceRotateCredentialHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCredentialManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCredentialManagerServiceHandler struct{}

func (UnimplementedCredentialManagerServiceHandler) RotateCredential(context.Context, *connect.Request[v2.RotateCredentialRequest]) (*connect.Response[v2.RotateCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.CredentialManagerService.RotateCredential is not implemented"))
}

// AccountManagerServiceClient is a client for the c1.connector.v2.AccountManagerService service.
type AccountManagerServiceClient interface {
	CreateAccount(context.Context, *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error)
}

// NewAccountManagerServiceClient constructs a client for the c1.connector.v2.AccountManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountManagerServiceClient{
		createAccount: connect.NewClient[v2.CreateAccountRequest, v2.CreateAccountResponse](
			httpClient,
			baseURL+AccountManagerServiceCreateAccountProcedure,
			connect.WithSchema(accountManagerServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountManagerServiceClient implements AccountManagerServiceClient.
type accountManagerServiceClient struct {
	createAccount *connect.Client[v2.CreateAccountRequest, v2.CreateAccountResponse]
}

// CreateAccount calls c1.connector.v2.AccountManagerService.CreateAccount.
func (c *accountManagerServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// AccountManagerServiceHandler is an implementation of the c1.connector.v2.AccountManagerService
// service.
type AccountManagerServiceHandler interface {
	CreateAccount(context.Context, *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error)
}

// NewAccountManagerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountManagerServiceHandler(svc AccountManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountManagerServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountManagerServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountManagerServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.AccountManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountManagerServiceCreateAccountProcedure:
			accountManagerServiceCreateAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountManagerServiceHandler struct{}

func (UnimplementedAccountManagerServiceHandler) CreateAccount(context.Context, *connect.Request[v2.CreateAccountRequest]) (*connect.Response[v2.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.AccountManagerService.CreateAccount is not implemented"))
}
