// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/grant.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GrantsServiceName is the fully-qualified name of the GrantsService service.
	GrantsServiceName = "c1.connector.v2.GrantsService"
	// GrantManagerServiceName is the fully-qualified name of the GrantManagerService service.
	GrantManagerServiceName = "c1.connector.v2.GrantManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GrantsServiceListGrantsProcedure is the fully-qualified name of the GrantsService's ListGrants
	// RPC.
	GrantsServiceListGrantsProcedure = "/c1.connector.v2.GrantsService/ListGrants"
	// GrantManagerServiceGrantProcedure is the fully-qualified name of the GrantManagerService's Grant
	// RPC.
	GrantManagerServiceGrantProcedure = "/c1.connector.v2.GrantManagerService/Grant"
	// GrantManagerServiceRevokeProcedure is the fully-qualified name of the GrantManagerService's
	// Revoke RPC.
	GrantManagerServiceRevokeProcedure = "/c1.connector.v2.GrantManagerService/Revoke"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	grantsServiceServiceDescriptor            = v2.File_c1_connector_v2_grant_proto.Services().ByName("GrantsService")
	grantsServiceListGrantsMethodDescriptor   = grantsServiceServiceDescriptor.Methods().ByName("ListGrants")
	grantManagerServiceServiceDescriptor      = v2.File_c1_connector_v2_grant_proto.Services().ByName("GrantManagerService")
	grantManagerServiceGrantMethodDescriptor  = grantManagerServiceServiceDescriptor.Methods().ByName("Grant")
	grantManagerServiceRevokeMethodDescriptor = grantManagerServiceServiceDescriptor.Methods().ByName("Revoke")
)

// GrantsServiceClient is a client for the c1.connector.v2.GrantsService service.
type GrantsServiceClient interface {
	ListGrants(context.Context, *connect.Request[v2.GrantsServiceListGrantsRequest]) (*connect.Response[v2.GrantsServiceListGrantsResponse], error)
}

// NewGrantsServiceClient constructs a client for the c1.connector.v2.GrantsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGrantsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GrantsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &grantsServiceClient{
		listGrants: connect.NewClient[v2.GrantsServiceListGrantsRequest, v2.GrantsServiceListGrantsResponse](
			httpClient,
			baseURL+GrantsServiceListGrantsProcedure,
			connect.WithSchema(grantsServiceListGrantsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// grantsServiceClient implements GrantsServiceClient.
type grantsServiceClient struct {
	listGrants *connect.Client[v2.GrantsServiceListGrantsRequest, v2.GrantsServiceListGrantsResponse]
}

// ListGrants calls c1.connector.v2.GrantsService.ListGrants.
func (c *grantsServiceClient) ListGrants(ctx context.Context, req *connect.Request[v2.GrantsServiceListGrantsRequest]) (*connect.Response[v2.GrantsServiceListGrantsResponse], error) {
	return c.listGrants.CallUnary(ctx, req)
}

// GrantsServiceHandler is an implementation of the c1.connector.v2.GrantsService service.
type GrantsServiceHandler interface {
	ListGrants(context.Context, *connect.Request[v2.GrantsServiceListGrantsRequest]) (*connect.Response[v2.GrantsServiceListGrantsResponse], error)
}

// NewGrantsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGrantsServiceHandler(svc GrantsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	grantsServiceListGrantsHandler := connect.NewUnaryHandler(
		GrantsServiceListGrantsProcedure,
		svc.ListGrants,
		connect.WithSchema(grantsServiceListGrantsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.GrantsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GrantsServiceListGrantsProcedure:
			grantsServiceListGrantsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGrantsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGrantsServiceHandler struct{}

func (UnimplementedGrantsServiceHandler) ListGrants(context.Context, *connect.Request[v2.GrantsServiceListGrantsRequest]) (*connect.Response[v2.GrantsServiceListGrantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.GrantsService.ListGrants is not implemented"))
}

// GrantManagerServiceClient is a client for the c1.connector.v2.GrantManagerService service.
type GrantManagerServiceClient interface {
	Grant(context.Context, *connect.Request[v2.GrantManagerServiceGrantRequest]) (*connect.Response[v2.GrantManagerServiceGrantResponse], error)
	Revoke(context.Context, *connect.Request[v2.GrantManagerServiceRevokeRequest]) (*connect.Response[v2.GrantManagerServiceRevokeResponse], error)
}

// NewGrantManagerServiceClient constructs a client for the c1.connector.v2.GrantManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGrantManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GrantManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &grantManagerServiceClient{
		grant: connect.NewClient[v2.GrantManagerServiceGrantRequest, v2.GrantManagerServiceGrantResponse](
			httpClient,
			baseURL+GrantManagerServiceGrantProcedure,
			connect.WithSchema(grantManagerServiceGrantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revoke: connect.NewClient[v2.GrantManagerServiceRevokeRequest, v2.GrantManagerServiceRevokeResponse](
			httpClient,
			baseURL+GrantManagerServiceRevokeProcedure,
			connect.WithSchema(grantManagerServiceRevokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// grantManagerServiceClient implements GrantManagerServiceClient.
type grantManagerServiceClient struct {
	grant  *connect.Client[v2.GrantManagerServiceGrantRequest, v2.GrantManagerServiceGrantResponse]
	revoke *connect.Client[v2.GrantManagerServiceRevokeRequest, v2.GrantManagerServiceRevokeResponse]
}

// Grant calls c1.connector.v2.GrantManagerService.Grant.
func (c *grantManagerServiceClient) Grant(ctx context.Context, req *connect.Request[v2.GrantManagerServiceGrantRequest]) (*connect.Response[v2.GrantManagerServiceGrantResponse], error) {
	return c.grant.CallUnary(ctx, req)
}

// Revoke calls c1.connector.v2.GrantManagerService.Revoke.
func (c *grantManagerServiceClient) Revoke(ctx context.Context, req *connect.Request[v2.GrantManagerServiceRevokeRequest]) (*connect.Response[v2.GrantManagerServiceRevokeResponse], error) {
	return c.revoke.CallUnary(ctx, req)
}

// GrantManagerServiceHandler is an implementation of the c1.connector.v2.GrantManagerService
// service.
type GrantManagerServiceHandler interface {
	Grant(context.Context, *connect.Request[v2.GrantManagerServiceGrantRequest]) (*connect.Response[v2.GrantManagerServiceGrantResponse], error)
	Revoke(context.Context, *connect.Request[v2.GrantManagerServiceRevokeRequest]) (*connect.Response[v2.GrantManagerServiceRevokeResponse], error)
}

// NewGrantManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGrantManagerServiceHandler(svc GrantManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	grantManagerServiceGrantHandler := connect.NewUnaryHandler(
		GrantManagerServiceGrantProcedure,
		svc.Grant,
		connect.WithSchema(grantManagerServiceGrantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	grantManagerServiceRevokeHandler := connect.NewUnaryHandler(
		GrantManagerServiceRevokeProcedure,
		svc.Revoke,
		connect.WithSchema(grantManagerServiceRevokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.GrantManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GrantManagerServiceGrantProcedure:
			grantManagerServiceGrantHandler.ServeHTTP(w, r)
		case GrantManagerServiceRevokeProcedure:
			grantManagerServiceRevokeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGrantManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGrantManagerServiceHandler struct{}

func (UnimplementedGrantManagerServiceHandler) Grant(context.Context, *connect.Request[v2.GrantManagerServiceGrantRequest]) (*connect.Response[v2.GrantManagerServiceGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.GrantManagerService.Grant is not implemented"))
}

func (UnimplementedGrantManagerServiceHandler) Revoke(context.Context, *connect.Request[v2.GrantManagerServiceRevokeRequest]) (*connect.Response[v2.GrantManagerServiceRevokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.GrantManagerService.Revoke is not implemented"))
}
