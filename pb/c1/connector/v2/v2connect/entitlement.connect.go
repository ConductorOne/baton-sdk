// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connector/v2/entitlement.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/connector/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EntitlementsServiceName is the fully-qualified name of the EntitlementsService service.
	EntitlementsServiceName = "c1.connector.v2.EntitlementsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntitlementsServiceListEntitlementsProcedure is the fully-qualified name of the
	// EntitlementsService's ListEntitlements RPC.
	EntitlementsServiceListEntitlementsProcedure = "/c1.connector.v2.EntitlementsService/ListEntitlements"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	entitlementsServiceServiceDescriptor                = v2.File_c1_connector_v2_entitlement_proto.Services().ByName("EntitlementsService")
	entitlementsServiceListEntitlementsMethodDescriptor = entitlementsServiceServiceDescriptor.Methods().ByName("ListEntitlements")
)

// EntitlementsServiceClient is a client for the c1.connector.v2.EntitlementsService service.
type EntitlementsServiceClient interface {
	ListEntitlements(context.Context, *connect.Request[v2.EntitlementsServiceListEntitlementsRequest]) (*connect.Response[v2.EntitlementsServiceListEntitlementsResponse], error)
}

// NewEntitlementsServiceClient constructs a client for the c1.connector.v2.EntitlementsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntitlementsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EntitlementsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &entitlementsServiceClient{
		listEntitlements: connect.NewClient[v2.EntitlementsServiceListEntitlementsRequest, v2.EntitlementsServiceListEntitlementsResponse](
			httpClient,
			baseURL+EntitlementsServiceListEntitlementsProcedure,
			connect.WithSchema(entitlementsServiceListEntitlementsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// entitlementsServiceClient implements EntitlementsServiceClient.
type entitlementsServiceClient struct {
	listEntitlements *connect.Client[v2.EntitlementsServiceListEntitlementsRequest, v2.EntitlementsServiceListEntitlementsResponse]
}

// ListEntitlements calls c1.connector.v2.EntitlementsService.ListEntitlements.
func (c *entitlementsServiceClient) ListEntitlements(ctx context.Context, req *connect.Request[v2.EntitlementsServiceListEntitlementsRequest]) (*connect.Response[v2.EntitlementsServiceListEntitlementsResponse], error) {
	return c.listEntitlements.CallUnary(ctx, req)
}

// EntitlementsServiceHandler is an implementation of the c1.connector.v2.EntitlementsService
// service.
type EntitlementsServiceHandler interface {
	ListEntitlements(context.Context, *connect.Request[v2.EntitlementsServiceListEntitlementsRequest]) (*connect.Response[v2.EntitlementsServiceListEntitlementsResponse], error)
}

// NewEntitlementsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntitlementsServiceHandler(svc EntitlementsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	entitlementsServiceListEntitlementsHandler := connect.NewUnaryHandler(
		EntitlementsServiceListEntitlementsProcedure,
		svc.ListEntitlements,
		connect.WithSchema(entitlementsServiceListEntitlementsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connector.v2.EntitlementsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntitlementsServiceListEntitlementsProcedure:
			entitlementsServiceListEntitlementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntitlementsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntitlementsServiceHandler struct{}

func (UnimplementedEntitlementsServiceHandler) ListEntitlements(context.Context, *connect.Request[v2.EntitlementsServiceListEntitlementsRequest]) (*connect.Response[v2.EntitlementsServiceListEntitlementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connector.v2.EntitlementsService.ListEntitlements is not implemented"))
}
