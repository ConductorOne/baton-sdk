// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: c1/connector/v2/action.proto

package v2

import (
	v1 "github.com/conductorone/baton-sdk/pb/c1/config/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatonActionStatus int32

const (
	BatonActionStatus_BATON_ACTION_STATUS_UNSPECIFIED BatonActionStatus = 0
	BatonActionStatus_BATON_ACTION_STATUS_UNKNOWN     BatonActionStatus = 1
	BatonActionStatus_BATON_ACTION_STATUS_PENDING     BatonActionStatus = 2
	BatonActionStatus_BATON_ACTION_STATUS_RUNNING     BatonActionStatus = 3
	BatonActionStatus_BATON_ACTION_STATUS_COMPLETE    BatonActionStatus = 4
	BatonActionStatus_BATON_ACTION_STATUS_FAILED      BatonActionStatus = 5
)

// Enum value maps for BatonActionStatus.
var (
	BatonActionStatus_name = map[int32]string{
		0: "BATON_ACTION_STATUS_UNSPECIFIED",
		1: "BATON_ACTION_STATUS_UNKNOWN",
		2: "BATON_ACTION_STATUS_PENDING",
		3: "BATON_ACTION_STATUS_RUNNING",
		4: "BATON_ACTION_STATUS_COMPLETE",
		5: "BATON_ACTION_STATUS_FAILED",
	}
	BatonActionStatus_value = map[string]int32{
		"BATON_ACTION_STATUS_UNSPECIFIED": 0,
		"BATON_ACTION_STATUS_UNKNOWN":     1,
		"BATON_ACTION_STATUS_PENDING":     2,
		"BATON_ACTION_STATUS_RUNNING":     3,
		"BATON_ACTION_STATUS_COMPLETE":    4,
		"BATON_ACTION_STATUS_FAILED":      5,
	}
)

func (x BatonActionStatus) Enum() *BatonActionStatus {
	p := new(BatonActionStatus)
	*p = x
	return p
}

func (x BatonActionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatonActionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_c1_connector_v2_action_proto_enumTypes[0].Descriptor()
}

func (BatonActionStatus) Type() protoreflect.EnumType {
	return &file_c1_connector_v2_action_proto_enumTypes[0]
}

func (x BatonActionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatonActionStatus.Descriptor instead.
func (BatonActionStatus) EnumDescriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{0}
}

type BatonLifeCycleManagementActionType int32

const (
	BatonLifeCycleManagementActionType_BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_UNSPECIFIED BatonLifeCycleManagementActionType = 0
	BatonLifeCycleManagementActionType_BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_NONE        BatonLifeCycleManagementActionType = 1
	BatonLifeCycleManagementActionType_BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_ENABLE      BatonLifeCycleManagementActionType = 2
	BatonLifeCycleManagementActionType_BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_DISABLE     BatonLifeCycleManagementActionType = 3
	BatonLifeCycleManagementActionType_BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_DELETE      BatonLifeCycleManagementActionType = 4
	BatonLifeCycleManagementActionType_BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_CREATE      BatonLifeCycleManagementActionType = 5
)

// Enum value maps for BatonLifeCycleManagementActionType.
var (
	BatonLifeCycleManagementActionType_name = map[int32]string{
		0: "BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_UNSPECIFIED",
		1: "BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_NONE",
		2: "BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_ENABLE",
		3: "BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_DISABLE",
		4: "BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_DELETE",
		5: "BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_CREATE",
	}
	BatonLifeCycleManagementActionType_value = map[string]int32{
		"BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_UNSPECIFIED": 0,
		"BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_NONE":        1,
		"BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_ENABLE":      2,
		"BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_DISABLE":     3,
		"BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_DELETE":      4,
		"BATON_LIFE_CYCLE_MANAGEMENT_ACTION_TYPE_CREATE":      5,
	}
)

func (x BatonLifeCycleManagementActionType) Enum() *BatonLifeCycleManagementActionType {
	p := new(BatonLifeCycleManagementActionType)
	*p = x
	return p
}

func (x BatonLifeCycleManagementActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatonLifeCycleManagementActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_c1_connector_v2_action_proto_enumTypes[1].Descriptor()
}

func (BatonLifeCycleManagementActionType) Type() protoreflect.EnumType {
	return &file_c1_connector_v2_action_proto_enumTypes[1]
}

func (x BatonLifeCycleManagementActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatonLifeCycleManagementActionType.Descriptor instead.
func (BatonLifeCycleManagementActionType) EnumDescriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{1}
}

type ActionSchemaFilterType int32

const (
	ActionSchemaFilterType_ACTION_SCHEMA_FILTER_TYPE_UNSPECIFIED             ActionSchemaFilterType = 0
	ActionSchemaFilterType_ACTION_SCHEMA_FILTER_TYPE_ALL                     ActionSchemaFilterType = 1
	ActionSchemaFilterType_ACTION_SCHEMA_FILTER_TYPE_WITH_LIFECYCLE_TRAIT    ActionSchemaFilterType = 2
	ActionSchemaFilterType_ACTION_SCHEMA_FILTER_TYPE_WITHOUT_LIFECYCLE_TRAIT ActionSchemaFilterType = 3
)

// Enum value maps for ActionSchemaFilterType.
var (
	ActionSchemaFilterType_name = map[int32]string{
		0: "ACTION_SCHEMA_FILTER_TYPE_UNSPECIFIED",
		1: "ACTION_SCHEMA_FILTER_TYPE_ALL",
		2: "ACTION_SCHEMA_FILTER_TYPE_WITH_LIFECYCLE_TRAIT",
		3: "ACTION_SCHEMA_FILTER_TYPE_WITHOUT_LIFECYCLE_TRAIT",
	}
	ActionSchemaFilterType_value = map[string]int32{
		"ACTION_SCHEMA_FILTER_TYPE_UNSPECIFIED":             0,
		"ACTION_SCHEMA_FILTER_TYPE_ALL":                     1,
		"ACTION_SCHEMA_FILTER_TYPE_WITH_LIFECYCLE_TRAIT":    2,
		"ACTION_SCHEMA_FILTER_TYPE_WITHOUT_LIFECYCLE_TRAIT": 3,
	}
)

func (x ActionSchemaFilterType) Enum() *ActionSchemaFilterType {
	p := new(ActionSchemaFilterType)
	*p = x
	return p
}

func (x ActionSchemaFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionSchemaFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_c1_connector_v2_action_proto_enumTypes[2].Descriptor()
}

func (ActionSchemaFilterType) Type() protoreflect.EnumType {
	return &file_c1_connector_v2_action_proto_enumTypes[2]
}

func (x ActionSchemaFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionSchemaFilterType.Descriptor instead.
func (ActionSchemaFilterType) EnumDescriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{2}
}

type BatonActionSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments     []*v1.Field            `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Constraints   []*v1.Constraint       `protobuf:"bytes,3,rep,name=constraints,proto3" json:"constraints,omitempty"`
	ReturnTypes   []*v1.Field            `protobuf:"bytes,4,rep,name=return_types,json=returnTypes,proto3" json:"return_types,omitempty"`
	DisplayName   string                 `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Traits        []*anypb.Any           `protobuf:"bytes,7,rep,name=traits,proto3" json:"traits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatonActionSchema) Reset() {
	*x = BatonActionSchema{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatonActionSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatonActionSchema) ProtoMessage() {}

func (x *BatonActionSchema) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatonActionSchema.ProtoReflect.Descriptor instead.
func (*BatonActionSchema) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{0}
}

func (x *BatonActionSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatonActionSchema) GetArguments() []*v1.Field {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *BatonActionSchema) GetConstraints() []*v1.Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *BatonActionSchema) GetReturnTypes() []*v1.Field {
	if x != nil {
		return x.ReturnTypes
	}
	return nil
}

func (x *BatonActionSchema) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BatonActionSchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BatonActionSchema) GetTraits() []*anypb.Any {
	if x != nil {
		return x.Traits
	}
	return nil
}

type LifecycleManagementActionTrait struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	ActionTypes   []BatonLifeCycleManagementActionType `protobuf:"varint,1,rep,packed,name=action_types,json=actionTypes,proto3,enum=c1.connector.v2.BatonLifeCycleManagementActionType" json:"action_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifecycleManagementActionTrait) Reset() {
	*x = LifecycleManagementActionTrait{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleManagementActionTrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleManagementActionTrait) ProtoMessage() {}

func (x *LifecycleManagementActionTrait) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleManagementActionTrait.ProtoReflect.Descriptor instead.
func (*LifecycleManagementActionTrait) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{1}
}

func (x *LifecycleManagementActionTrait) GetActionTypes() []BatonLifeCycleManagementActionType {
	if x != nil {
		return x.ActionTypes
	}
	return nil
}

type InvokeActionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args          *structpb.Struct       `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Annotations   []*anypb.Any           `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeActionRequest) Reset() {
	*x = InvokeActionRequest{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeActionRequest) ProtoMessage() {}

func (x *InvokeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeActionRequest.ProtoReflect.Descriptor instead.
func (*InvokeActionRequest) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{2}
}

func (x *InvokeActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InvokeActionRequest) GetArgs() *structpb.Struct {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InvokeActionRequest) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type InvokeActionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        BatonActionStatus      `protobuf:"varint,2,opt,name=status,proto3,enum=c1.connector.v2.BatonActionStatus" json:"status,omitempty"`
	Annotations   []*anypb.Any           `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Response      *structpb.Struct       `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeActionResponse) Reset() {
	*x = InvokeActionResponse{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeActionResponse) ProtoMessage() {}

func (x *InvokeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeActionResponse.ProtoReflect.Descriptor instead.
func (*InvokeActionResponse) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{3}
}

func (x *InvokeActionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvokeActionResponse) GetStatus() BatonActionStatus {
	if x != nil {
		return x.Status
	}
	return BatonActionStatus_BATON_ACTION_STATUS_UNSPECIFIED
}

func (x *InvokeActionResponse) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *InvokeActionResponse) GetResponse() *structpb.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *InvokeActionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetActionStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in c1/connector/v2/action.proto.
	Name          string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id            string       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Annotations   []*anypb.Any `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActionStatusRequest) Reset() {
	*x = GetActionStatusRequest{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionStatusRequest) ProtoMessage() {}

func (x *GetActionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetActionStatusRequest) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in c1/connector/v2/action.proto.
func (x *GetActionStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetActionStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetActionStatusRequest) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type GetActionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Status        BatonActionStatus      `protobuf:"varint,3,opt,name=status,proto3,enum=c1.connector.v2.BatonActionStatus" json:"status,omitempty"`
	Annotations   []*anypb.Any           `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Response      *structpb.Struct       `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActionStatusResponse) Reset() {
	*x = GetActionStatusResponse{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionStatusResponse) ProtoMessage() {}

func (x *GetActionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetActionStatusResponse) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{5}
}

func (x *GetActionStatusResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetActionStatusResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetActionStatusResponse) GetStatus() BatonActionStatus {
	if x != nil {
		return x.Status
	}
	return BatonActionStatus_BATON_ACTION_STATUS_UNSPECIFIED
}

func (x *GetActionStatusResponse) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetActionStatusResponse) GetResponse() *structpb.Struct {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetActionSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Annotations   []*anypb.Any           `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActionSchemaRequest) Reset() {
	*x = GetActionSchemaRequest{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActionSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionSchemaRequest) ProtoMessage() {}

func (x *GetActionSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetActionSchemaRequest) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{6}
}

func (x *GetActionSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetActionSchemaRequest) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type GetActionSchemaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        *BatonActionSchema     `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Annotations   []*anypb.Any           `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActionSchemaResponse) Reset() {
	*x = GetActionSchemaResponse{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActionSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionSchemaResponse) ProtoMessage() {}

func (x *GetActionSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetActionSchemaResponse) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{7}
}

func (x *GetActionSchemaResponse) GetSchema() *BatonActionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetActionSchemaResponse) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type ListActionSchemasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Annotations   []*anypb.Any           `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty"`
	Filter        *ActionSchemaFilter    `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActionSchemasRequest) Reset() {
	*x = ListActionSchemasRequest{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActionSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActionSchemasRequest) ProtoMessage() {}

func (x *ListActionSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActionSchemasRequest.ProtoReflect.Descriptor instead.
func (*ListActionSchemasRequest) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{8}
}

func (x *ListActionSchemasRequest) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ListActionSchemasRequest) GetFilter() *ActionSchemaFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ActionSchemaFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterType    ActionSchemaFilterType `protobuf:"varint,1,opt,name=filter_type,json=filterType,proto3,enum=c1.connector.v2.ActionSchemaFilterType" json:"filter_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSchemaFilter) Reset() {
	*x = ActionSchemaFilter{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSchemaFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSchemaFilter) ProtoMessage() {}

func (x *ActionSchemaFilter) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSchemaFilter.ProtoReflect.Descriptor instead.
func (*ActionSchemaFilter) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{9}
}

func (x *ActionSchemaFilter) GetFilterType() ActionSchemaFilterType {
	if x != nil {
		return x.FilterType
	}
	return ActionSchemaFilterType_ACTION_SCHEMA_FILTER_TYPE_UNSPECIFIED
}

type ListActionSchemasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schemas       []*BatonActionSchema   `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	Annotations   []*anypb.Any           `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActionSchemasResponse) Reset() {
	*x = ListActionSchemasResponse{}
	mi := &file_c1_connector_v2_action_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActionSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActionSchemasResponse) ProtoMessage() {}

func (x *ListActionSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_connector_v2_action_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActionSchemasResponse.ProtoReflect.Descriptor instead.
func (*ListActionSchemasResponse) Descriptor() ([]byte, []int) {
	return file_c1_connector_v2_action_proto_rawDescGZIP(), []int{10}
}

func (x *ListActionSchemasResponse) GetSchemas() []*BatonActionSchema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *ListActionSchemasResponse) GetAnnotations() []*anypb.Any {
	if x != nil {
		return x.Annotations
	}
	return nil
}

var File_c1_connector_v2_action_proto protoreflect.FileDescriptor

var file_c1_connector_v2_action_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x63, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x1a,
	0x19, 0x63, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0c,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x1e, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x61, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xdd, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xe0, 0x02, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x6f,
	0x6e, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x33, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x41, 0x54, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x41, 0x54,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x33, 0x0a,
	0x2f, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x41, 0x54, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x46, 0x45, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x2a, 0xd1, 0x01, 0x0a, 0x16, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x02, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x03, 0x32, 0xa4,
	0x03, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5b, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x29,
	0x2e, 0x63, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x6f, 0x6e, 0x65,
	0x2f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_c1_connector_v2_action_proto_rawDescOnce sync.Once
	file_c1_connector_v2_action_proto_rawDescData []byte
)

func file_c1_connector_v2_action_proto_rawDescGZIP() []byte {
	file_c1_connector_v2_action_proto_rawDescOnce.Do(func() {
		file_c1_connector_v2_action_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_c1_connector_v2_action_proto_rawDesc), len(file_c1_connector_v2_action_proto_rawDesc)))
	})
	return file_c1_connector_v2_action_proto_rawDescData
}

var file_c1_connector_v2_action_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_c1_connector_v2_action_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_c1_connector_v2_action_proto_goTypes = []any{
	(BatonActionStatus)(0),                  // 0: c1.connector.v2.BatonActionStatus
	(BatonLifeCycleManagementActionType)(0), // 1: c1.connector.v2.BatonLifeCycleManagementActionType
	(ActionSchemaFilterType)(0),             // 2: c1.connector.v2.ActionSchemaFilterType
	(*BatonActionSchema)(nil),               // 3: c1.connector.v2.BatonActionSchema
	(*LifecycleManagementActionTrait)(nil),  // 4: c1.connector.v2.LifecycleManagementActionTrait
	(*InvokeActionRequest)(nil),             // 5: c1.connector.v2.InvokeActionRequest
	(*InvokeActionResponse)(nil),            // 6: c1.connector.v2.InvokeActionResponse
	(*GetActionStatusRequest)(nil),          // 7: c1.connector.v2.GetActionStatusRequest
	(*GetActionStatusResponse)(nil),         // 8: c1.connector.v2.GetActionStatusResponse
	(*GetActionSchemaRequest)(nil),          // 9: c1.connector.v2.GetActionSchemaRequest
	(*GetActionSchemaResponse)(nil),         // 10: c1.connector.v2.GetActionSchemaResponse
	(*ListActionSchemasRequest)(nil),        // 11: c1.connector.v2.ListActionSchemasRequest
	(*ActionSchemaFilter)(nil),              // 12: c1.connector.v2.ActionSchemaFilter
	(*ListActionSchemasResponse)(nil),       // 13: c1.connector.v2.ListActionSchemasResponse
	(*v1.Field)(nil),                        // 14: c1.config.v1.Field
	(*v1.Constraint)(nil),                   // 15: c1.config.v1.Constraint
	(*anypb.Any)(nil),                       // 16: google.protobuf.Any
	(*structpb.Struct)(nil),                 // 17: google.protobuf.Struct
}
var file_c1_connector_v2_action_proto_depIdxs = []int32{
	14, // 0: c1.connector.v2.BatonActionSchema.arguments:type_name -> c1.config.v1.Field
	15, // 1: c1.connector.v2.BatonActionSchema.constraints:type_name -> c1.config.v1.Constraint
	14, // 2: c1.connector.v2.BatonActionSchema.return_types:type_name -> c1.config.v1.Field
	16, // 3: c1.connector.v2.BatonActionSchema.traits:type_name -> google.protobuf.Any
	1,  // 4: c1.connector.v2.LifecycleManagementActionTrait.action_types:type_name -> c1.connector.v2.BatonLifeCycleManagementActionType
	17, // 5: c1.connector.v2.InvokeActionRequest.args:type_name -> google.protobuf.Struct
	16, // 6: c1.connector.v2.InvokeActionRequest.annotations:type_name -> google.protobuf.Any
	0,  // 7: c1.connector.v2.InvokeActionResponse.status:type_name -> c1.connector.v2.BatonActionStatus
	16, // 8: c1.connector.v2.InvokeActionResponse.annotations:type_name -> google.protobuf.Any
	17, // 9: c1.connector.v2.InvokeActionResponse.response:type_name -> google.protobuf.Struct
	16, // 10: c1.connector.v2.GetActionStatusRequest.annotations:type_name -> google.protobuf.Any
	0,  // 11: c1.connector.v2.GetActionStatusResponse.status:type_name -> c1.connector.v2.BatonActionStatus
	16, // 12: c1.connector.v2.GetActionStatusResponse.annotations:type_name -> google.protobuf.Any
	17, // 13: c1.connector.v2.GetActionStatusResponse.response:type_name -> google.protobuf.Struct
	16, // 14: c1.connector.v2.GetActionSchemaRequest.annotations:type_name -> google.protobuf.Any
	3,  // 15: c1.connector.v2.GetActionSchemaResponse.schema:type_name -> c1.connector.v2.BatonActionSchema
	16, // 16: c1.connector.v2.GetActionSchemaResponse.annotations:type_name -> google.protobuf.Any
	16, // 17: c1.connector.v2.ListActionSchemasRequest.annotations:type_name -> google.protobuf.Any
	12, // 18: c1.connector.v2.ListActionSchemasRequest.filter:type_name -> c1.connector.v2.ActionSchemaFilter
	2,  // 19: c1.connector.v2.ActionSchemaFilter.filter_type:type_name -> c1.connector.v2.ActionSchemaFilterType
	3,  // 20: c1.connector.v2.ListActionSchemasResponse.schemas:type_name -> c1.connector.v2.BatonActionSchema
	16, // 21: c1.connector.v2.ListActionSchemasResponse.annotations:type_name -> google.protobuf.Any
	5,  // 22: c1.connector.v2.ActionService.InvokeAction:input_type -> c1.connector.v2.InvokeActionRequest
	7,  // 23: c1.connector.v2.ActionService.GetActionStatus:input_type -> c1.connector.v2.GetActionStatusRequest
	9,  // 24: c1.connector.v2.ActionService.GetActionSchema:input_type -> c1.connector.v2.GetActionSchemaRequest
	11, // 25: c1.connector.v2.ActionService.ListActionSchemas:input_type -> c1.connector.v2.ListActionSchemasRequest
	6,  // 26: c1.connector.v2.ActionService.InvokeAction:output_type -> c1.connector.v2.InvokeActionResponse
	8,  // 27: c1.connector.v2.ActionService.GetActionStatus:output_type -> c1.connector.v2.GetActionStatusResponse
	10, // 28: c1.connector.v2.ActionService.GetActionSchema:output_type -> c1.connector.v2.GetActionSchemaResponse
	13, // 29: c1.connector.v2.ActionService.ListActionSchemas:output_type -> c1.connector.v2.ListActionSchemasResponse
	26, // [26:30] is the sub-list for method output_type
	22, // [22:26] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_c1_connector_v2_action_proto_init() }
func file_c1_connector_v2_action_proto_init() {
	if File_c1_connector_v2_action_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_c1_connector_v2_action_proto_rawDesc), len(file_c1_connector_v2_action_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_c1_connector_v2_action_proto_goTypes,
		DependencyIndexes: file_c1_connector_v2_action_proto_depIdxs,
		EnumInfos:         file_c1_connector_v2_action_proto_enumTypes,
		MessageInfos:      file_c1_connector_v2_action_proto_msgTypes,
	}.Build()
	File_c1_connector_v2_action_proto = out.File
	file_c1_connector_v2_action_proto_goTypes = nil
	file_c1_connector_v2_action_proto_depIdxs = nil
}
