// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/action.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BatonActionSchema with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatonActionSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonActionSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonActionSchemaMultiError, or nil if none found.
func (m *BatonActionSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonActionSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetArguments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Arguments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Arguments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatonActionSchemaValidationError{
					field:  fmt.Sprintf("Arguments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatonActionSchemaValidationError{
					field:  fmt.Sprintf("Constraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetReturnTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("ReturnTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("ReturnTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatonActionSchemaValidationError{
					field:  fmt.Sprintf("ReturnTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatonActionSchemaMultiError(errors)
	}

	return nil
}

// BatonActionSchemaMultiError is an error wrapping multiple validation errors
// returned by BatonActionSchema.ValidateAll() if the designated constraints
// aren't met.
type BatonActionSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonActionSchemaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonActionSchemaMultiError) AllErrors() []error { return m }

// BatonActionSchemaValidationError is the validation error returned by
// BatonActionSchema.Validate if the designated constraints aren't met.
type BatonActionSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonActionSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonActionSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonActionSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonActionSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonActionSchemaValidationError) ErrorName() string {
	return "BatonActionSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e BatonActionSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonActionSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonActionSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonActionSchemaValidationError{}

// Validate checks the field values on ActionServiceInvokeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceInvokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceInvokeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionServiceInvokeRequestMultiError, or nil if none found.
func (m *ActionServiceInvokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceInvokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionServiceInvokeRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionServiceInvokeRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionServiceInvokeRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceInvokeRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceInvokeRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceInvokeRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceInvokeRequestMultiError(errors)
	}

	return nil
}

// ActionServiceInvokeRequestMultiError is an error wrapping multiple
// validation errors returned by ActionServiceInvokeRequest.ValidateAll() if
// the designated constraints aren't met.
type ActionServiceInvokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceInvokeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceInvokeRequestMultiError) AllErrors() []error { return m }

// ActionServiceInvokeRequestValidationError is the validation error returned
// by ActionServiceInvokeRequest.Validate if the designated constraints aren't met.
type ActionServiceInvokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceInvokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceInvokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceInvokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceInvokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceInvokeRequestValidationError) ErrorName() string {
	return "ActionServiceInvokeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceInvokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceInvokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceInvokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceInvokeRequestValidationError{}

// Validate checks the field values on ActionServiceInvokeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceInvokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceInvokeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionServiceInvokeResponseMultiError, or nil if none found.
func (m *ActionServiceInvokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceInvokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceInvokeResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceInvokeResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceInvokeResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceInvokeResponseMultiError(errors)
	}

	return nil
}

// ActionServiceInvokeResponseMultiError is an error wrapping multiple
// validation errors returned by ActionServiceInvokeResponse.ValidateAll() if
// the designated constraints aren't met.
type ActionServiceInvokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceInvokeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceInvokeResponseMultiError) AllErrors() []error { return m }

// ActionServiceInvokeResponseValidationError is the validation error returned
// by ActionServiceInvokeResponse.Validate if the designated constraints
// aren't met.
type ActionServiceInvokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceInvokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceInvokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceInvokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceInvokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceInvokeResponseValidationError) ErrorName() string {
	return "ActionServiceInvokeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceInvokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceInvokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceInvokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceInvokeResponseValidationError{}

// Validate checks the field values on ActionServiceStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionServiceStatusRequestMultiError, or nil if none found.
func (m *ActionServiceStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceStatusRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceStatusRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceStatusRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceStatusRequestMultiError(errors)
	}

	return nil
}

// ActionServiceStatusRequestMultiError is an error wrapping multiple
// validation errors returned by ActionServiceStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type ActionServiceStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceStatusRequestMultiError) AllErrors() []error { return m }

// ActionServiceStatusRequestValidationError is the validation error returned
// by ActionServiceStatusRequest.Validate if the designated constraints aren't met.
type ActionServiceStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceStatusRequestValidationError) ErrorName() string {
	return "ActionServiceStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceStatusRequestValidationError{}

// Validate checks the field values on ActionServiceStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionServiceStatusResponseMultiError, or nil if none found.
func (m *ActionServiceStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Status

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceStatusResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceStatusResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceStatusResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceStatusResponseMultiError(errors)
	}

	return nil
}

// ActionServiceStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ActionServiceStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type ActionServiceStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceStatusResponseMultiError) AllErrors() []error { return m }

// ActionServiceStatusResponseValidationError is the validation error returned
// by ActionServiceStatusResponse.Validate if the designated constraints
// aren't met.
type ActionServiceStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceStatusResponseValidationError) ErrorName() string {
	return "ActionServiceStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceStatusResponseValidationError{}

// Validate checks the field values on ActionServiceGetSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceGetSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceGetSchemaRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ActionServiceGetSchemaRequestMultiError, or nil if none found.
func (m *ActionServiceGetSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceGetSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceGetSchemaRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceGetSchemaRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceGetSchemaRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceGetSchemaRequestMultiError(errors)
	}

	return nil
}

// ActionServiceGetSchemaRequestMultiError is an error wrapping multiple
// validation errors returned by ActionServiceGetSchemaRequest.ValidateAll()
// if the designated constraints aren't met.
type ActionServiceGetSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceGetSchemaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceGetSchemaRequestMultiError) AllErrors() []error { return m }

// ActionServiceGetSchemaRequestValidationError is the validation error
// returned by ActionServiceGetSchemaRequest.Validate if the designated
// constraints aren't met.
type ActionServiceGetSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceGetSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceGetSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceGetSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceGetSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceGetSchemaRequestValidationError) ErrorName() string {
	return "ActionServiceGetSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceGetSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceGetSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceGetSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceGetSchemaRequestValidationError{}

// Validate checks the field values on ActionServiceGetSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceGetSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceGetSchemaResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ActionServiceGetSchemaResponseMultiError, or nil if none found.
func (m *ActionServiceGetSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceGetSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionServiceGetSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionServiceGetSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionServiceGetSchemaResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceGetSchemaResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceGetSchemaResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceGetSchemaResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceGetSchemaResponseMultiError(errors)
	}

	return nil
}

// ActionServiceGetSchemaResponseMultiError is an error wrapping multiple
// validation errors returned by ActionServiceGetSchemaResponse.ValidateAll()
// if the designated constraints aren't met.
type ActionServiceGetSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceGetSchemaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceGetSchemaResponseMultiError) AllErrors() []error { return m }

// ActionServiceGetSchemaResponseValidationError is the validation error
// returned by ActionServiceGetSchemaResponse.Validate if the designated
// constraints aren't met.
type ActionServiceGetSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceGetSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceGetSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceGetSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceGetSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceGetSchemaResponseValidationError) ErrorName() string {
	return "ActionServiceGetSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceGetSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceGetSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceGetSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceGetSchemaResponseValidationError{}

// Validate checks the field values on ActionServiceListSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionServiceListSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceListSchemasRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ActionServiceListSchemasRequestMultiError, or nil if none found.
func (m *ActionServiceListSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceListSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceListSchemasRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceListSchemasRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceListSchemasRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceListSchemasRequestMultiError(errors)
	}

	return nil
}

// ActionServiceListSchemasRequestMultiError is an error wrapping multiple
// validation errors returned by ActionServiceListSchemasRequest.ValidateAll()
// if the designated constraints aren't met.
type ActionServiceListSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceListSchemasRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceListSchemasRequestMultiError) AllErrors() []error { return m }

// ActionServiceListSchemasRequestValidationError is the validation error
// returned by ActionServiceListSchemasRequest.Validate if the designated
// constraints aren't met.
type ActionServiceListSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceListSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceListSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceListSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceListSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceListSchemasRequestValidationError) ErrorName() string {
	return "ActionServiceListSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceListSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceListSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceListSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceListSchemasRequestValidationError{}

// Validate checks the field values on ActionServiceListSchemasResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ActionServiceListSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionServiceListSchemasResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ActionServiceListSchemasResponseMultiError, or nil if none found.
func (m *ActionServiceListSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionServiceListSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceListSchemasResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceListSchemasResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceListSchemasResponseValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActionServiceListSchemasResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActionServiceListSchemasResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionServiceListSchemasResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ActionServiceListSchemasResponseMultiError(errors)
	}

	return nil
}

// ActionServiceListSchemasResponseMultiError is an error wrapping multiple
// validation errors returned by
// ActionServiceListSchemasResponse.ValidateAll() if the designated
// constraints aren't met.
type ActionServiceListSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionServiceListSchemasResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionServiceListSchemasResponseMultiError) AllErrors() []error { return m }

// ActionServiceListSchemasResponseValidationError is the validation error
// returned by ActionServiceListSchemasResponse.Validate if the designated
// constraints aren't met.
type ActionServiceListSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionServiceListSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionServiceListSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionServiceListSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionServiceListSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionServiceListSchemasResponseValidationError) ErrorName() string {
	return "ActionServiceListSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActionServiceListSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionServiceListSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionServiceListSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionServiceListSchemasResponseValidationError{}
