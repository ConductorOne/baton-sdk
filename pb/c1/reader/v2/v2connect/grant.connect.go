// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/reader/v2/grant.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/reader/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GrantsReaderServiceName is the fully-qualified name of the GrantsReaderService service.
	GrantsReaderServiceName = "c1.reader.v2.GrantsReaderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GrantsReaderServiceGetGrantProcedure is the fully-qualified name of the GrantsReaderService's
	// GetGrant RPC.
	GrantsReaderServiceGetGrantProcedure = "/c1.reader.v2.GrantsReaderService/GetGrant"
	// GrantsReaderServiceListGrantsForEntitlementProcedure is the fully-qualified name of the
	// GrantsReaderService's ListGrantsForEntitlement RPC.
	GrantsReaderServiceListGrantsForEntitlementProcedure = "/c1.reader.v2.GrantsReaderService/ListGrantsForEntitlement"
	// GrantsReaderServiceListGrantsForResourceTypeProcedure is the fully-qualified name of the
	// GrantsReaderService's ListGrantsForResourceType RPC.
	GrantsReaderServiceListGrantsForResourceTypeProcedure = "/c1.reader.v2.GrantsReaderService/ListGrantsForResourceType"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	grantsReaderServiceServiceDescriptor                         = v2.File_c1_reader_v2_grant_proto.Services().ByName("GrantsReaderService")
	grantsReaderServiceGetGrantMethodDescriptor                  = grantsReaderServiceServiceDescriptor.Methods().ByName("GetGrant")
	grantsReaderServiceListGrantsForEntitlementMethodDescriptor  = grantsReaderServiceServiceDescriptor.Methods().ByName("ListGrantsForEntitlement")
	grantsReaderServiceListGrantsForResourceTypeMethodDescriptor = grantsReaderServiceServiceDescriptor.Methods().ByName("ListGrantsForResourceType")
)

// GrantsReaderServiceClient is a client for the c1.reader.v2.GrantsReaderService service.
type GrantsReaderServiceClient interface {
	GetGrant(context.Context, *connect.Request[v2.GrantsReaderServiceGetGrantRequest]) (*connect.Response[v2.GrantsReaderServiceGetGrantResponse], error)
	ListGrantsForEntitlement(context.Context, *connect.Request[v2.GrantsReaderServiceListGrantsForEntitlementRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForEntitlementResponse], error)
	ListGrantsForResourceType(context.Context, *connect.Request[v2.GrantsReaderServiceListGrantsForResourceTypeRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForResourceTypeResponse], error)
}

// NewGrantsReaderServiceClient constructs a client for the c1.reader.v2.GrantsReaderService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGrantsReaderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GrantsReaderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &grantsReaderServiceClient{
		getGrant: connect.NewClient[v2.GrantsReaderServiceGetGrantRequest, v2.GrantsReaderServiceGetGrantResponse](
			httpClient,
			baseURL+GrantsReaderServiceGetGrantProcedure,
			connect.WithSchema(grantsReaderServiceGetGrantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGrantsForEntitlement: connect.NewClient[v2.GrantsReaderServiceListGrantsForEntitlementRequest, v2.GrantsReaderServiceListGrantsForEntitlementResponse](
			httpClient,
			baseURL+GrantsReaderServiceListGrantsForEntitlementProcedure,
			connect.WithSchema(grantsReaderServiceListGrantsForEntitlementMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGrantsForResourceType: connect.NewClient[v2.GrantsReaderServiceListGrantsForResourceTypeRequest, v2.GrantsReaderServiceListGrantsForResourceTypeResponse](
			httpClient,
			baseURL+GrantsReaderServiceListGrantsForResourceTypeProcedure,
			connect.WithSchema(grantsReaderServiceListGrantsForResourceTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// grantsReaderServiceClient implements GrantsReaderServiceClient.
type grantsReaderServiceClient struct {
	getGrant                  *connect.Client[v2.GrantsReaderServiceGetGrantRequest, v2.GrantsReaderServiceGetGrantResponse]
	listGrantsForEntitlement  *connect.Client[v2.GrantsReaderServiceListGrantsForEntitlementRequest, v2.GrantsReaderServiceListGrantsForEntitlementResponse]
	listGrantsForResourceType *connect.Client[v2.GrantsReaderServiceListGrantsForResourceTypeRequest, v2.GrantsReaderServiceListGrantsForResourceTypeResponse]
}

// GetGrant calls c1.reader.v2.GrantsReaderService.GetGrant.
func (c *grantsReaderServiceClient) GetGrant(ctx context.Context, req *connect.Request[v2.GrantsReaderServiceGetGrantRequest]) (*connect.Response[v2.GrantsReaderServiceGetGrantResponse], error) {
	return c.getGrant.CallUnary(ctx, req)
}

// ListGrantsForEntitlement calls c1.reader.v2.GrantsReaderService.ListGrantsForEntitlement.
func (c *grantsReaderServiceClient) ListGrantsForEntitlement(ctx context.Context, req *connect.Request[v2.GrantsReaderServiceListGrantsForEntitlementRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForEntitlementResponse], error) {
	return c.listGrantsForEntitlement.CallUnary(ctx, req)
}

// ListGrantsForResourceType calls c1.reader.v2.GrantsReaderService.ListGrantsForResourceType.
func (c *grantsReaderServiceClient) ListGrantsForResourceType(ctx context.Context, req *connect.Request[v2.GrantsReaderServiceListGrantsForResourceTypeRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForResourceTypeResponse], error) {
	return c.listGrantsForResourceType.CallUnary(ctx, req)
}

// GrantsReaderServiceHandler is an implementation of the c1.reader.v2.GrantsReaderService service.
type GrantsReaderServiceHandler interface {
	GetGrant(context.Context, *connect.Request[v2.GrantsReaderServiceGetGrantRequest]) (*connect.Response[v2.GrantsReaderServiceGetGrantResponse], error)
	ListGrantsForEntitlement(context.Context, *connect.Request[v2.GrantsReaderServiceListGrantsForEntitlementRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForEntitlementResponse], error)
	ListGrantsForResourceType(context.Context, *connect.Request[v2.GrantsReaderServiceListGrantsForResourceTypeRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForResourceTypeResponse], error)
}

// NewGrantsReaderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGrantsReaderServiceHandler(svc GrantsReaderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	grantsReaderServiceGetGrantHandler := connect.NewUnaryHandler(
		GrantsReaderServiceGetGrantProcedure,
		svc.GetGrant,
		connect.WithSchema(grantsReaderServiceGetGrantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	grantsReaderServiceListGrantsForEntitlementHandler := connect.NewUnaryHandler(
		GrantsReaderServiceListGrantsForEntitlementProcedure,
		svc.ListGrantsForEntitlement,
		connect.WithSchema(grantsReaderServiceListGrantsForEntitlementMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	grantsReaderServiceListGrantsForResourceTypeHandler := connect.NewUnaryHandler(
		GrantsReaderServiceListGrantsForResourceTypeProcedure,
		svc.ListGrantsForResourceType,
		connect.WithSchema(grantsReaderServiceListGrantsForResourceTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.reader.v2.GrantsReaderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GrantsReaderServiceGetGrantProcedure:
			grantsReaderServiceGetGrantHandler.ServeHTTP(w, r)
		case GrantsReaderServiceListGrantsForEntitlementProcedure:
			grantsReaderServiceListGrantsForEntitlementHandler.ServeHTTP(w, r)
		case GrantsReaderServiceListGrantsForResourceTypeProcedure:
			grantsReaderServiceListGrantsForResourceTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGrantsReaderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGrantsReaderServiceHandler struct{}

func (UnimplementedGrantsReaderServiceHandler) GetGrant(context.Context, *connect.Request[v2.GrantsReaderServiceGetGrantRequest]) (*connect.Response[v2.GrantsReaderServiceGetGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.reader.v2.GrantsReaderService.GetGrant is not implemented"))
}

func (UnimplementedGrantsReaderServiceHandler) ListGrantsForEntitlement(context.Context, *connect.Request[v2.GrantsReaderServiceListGrantsForEntitlementRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForEntitlementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.reader.v2.GrantsReaderService.ListGrantsForEntitlement is not implemented"))
}

func (UnimplementedGrantsReaderServiceHandler) ListGrantsForResourceType(context.Context, *connect.Request[v2.GrantsReaderServiceListGrantsForResourceTypeRequest]) (*connect.Response[v2.GrantsReaderServiceListGrantsForResourceTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.reader.v2.GrantsReaderService.ListGrantsForResourceType is not implemented"))
}
