// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/reader/v2/entitlement.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/reader/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EntitlementsReaderServiceName is the fully-qualified name of the EntitlementsReaderService
	// service.
	EntitlementsReaderServiceName = "c1.reader.v2.EntitlementsReaderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntitlementsReaderServiceGetEntitlementProcedure is the fully-qualified name of the
	// EntitlementsReaderService's GetEntitlement RPC.
	EntitlementsReaderServiceGetEntitlementProcedure = "/c1.reader.v2.EntitlementsReaderService/GetEntitlement"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	entitlementsReaderServiceServiceDescriptor              = v2.File_c1_reader_v2_entitlement_proto.Services().ByName("EntitlementsReaderService")
	entitlementsReaderServiceGetEntitlementMethodDescriptor = entitlementsReaderServiceServiceDescriptor.Methods().ByName("GetEntitlement")
)

// EntitlementsReaderServiceClient is a client for the c1.reader.v2.EntitlementsReaderService
// service.
type EntitlementsReaderServiceClient interface {
	GetEntitlement(context.Context, *connect.Request[v2.EntitlementsReaderServiceGetEntitlementRequest]) (*connect.Response[v2.EntitlementsReaderServiceGetEntitlementResponse], error)
}

// NewEntitlementsReaderServiceClient constructs a client for the
// c1.reader.v2.EntitlementsReaderService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntitlementsReaderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EntitlementsReaderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &entitlementsReaderServiceClient{
		getEntitlement: connect.NewClient[v2.EntitlementsReaderServiceGetEntitlementRequest, v2.EntitlementsReaderServiceGetEntitlementResponse](
			httpClient,
			baseURL+EntitlementsReaderServiceGetEntitlementProcedure,
			connect.WithSchema(entitlementsReaderServiceGetEntitlementMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// entitlementsReaderServiceClient implements EntitlementsReaderServiceClient.
type entitlementsReaderServiceClient struct {
	getEntitlement *connect.Client[v2.EntitlementsReaderServiceGetEntitlementRequest, v2.EntitlementsReaderServiceGetEntitlementResponse]
}

// GetEntitlement calls c1.reader.v2.EntitlementsReaderService.GetEntitlement.
func (c *entitlementsReaderServiceClient) GetEntitlement(ctx context.Context, req *connect.Request[v2.EntitlementsReaderServiceGetEntitlementRequest]) (*connect.Response[v2.EntitlementsReaderServiceGetEntitlementResponse], error) {
	return c.getEntitlement.CallUnary(ctx, req)
}

// EntitlementsReaderServiceHandler is an implementation of the
// c1.reader.v2.EntitlementsReaderService service.
type EntitlementsReaderServiceHandler interface {
	GetEntitlement(context.Context, *connect.Request[v2.EntitlementsReaderServiceGetEntitlementRequest]) (*connect.Response[v2.EntitlementsReaderServiceGetEntitlementResponse], error)
}

// NewEntitlementsReaderServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntitlementsReaderServiceHandler(svc EntitlementsReaderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	entitlementsReaderServiceGetEntitlementHandler := connect.NewUnaryHandler(
		EntitlementsReaderServiceGetEntitlementProcedure,
		svc.GetEntitlement,
		connect.WithSchema(entitlementsReaderServiceGetEntitlementMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.reader.v2.EntitlementsReaderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntitlementsReaderServiceGetEntitlementProcedure:
			entitlementsReaderServiceGetEntitlementHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntitlementsReaderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntitlementsReaderServiceHandler struct{}

func (UnimplementedEntitlementsReaderServiceHandler) GetEntitlement(context.Context, *connect.Request[v2.EntitlementsReaderServiceGetEntitlementRequest]) (*connect.Response[v2.EntitlementsReaderServiceGetEntitlementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.reader.v2.EntitlementsReaderService.GetEntitlement is not implemented"))
}
