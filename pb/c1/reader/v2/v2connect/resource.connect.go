// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/reader/v2/resource.proto

package v2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/conductorone/baton-sdk/pb/c1/reader/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ResourceTypesReaderServiceName is the fully-qualified name of the ResourceTypesReaderService
	// service.
	ResourceTypesReaderServiceName = "c1.reader.v2.ResourceTypesReaderService"
	// ResourcesReaderServiceName is the fully-qualified name of the ResourcesReaderService service.
	ResourcesReaderServiceName = "c1.reader.v2.ResourcesReaderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ResourceTypesReaderServiceGetResourceTypeProcedure is the fully-qualified name of the
	// ResourceTypesReaderService's GetResourceType RPC.
	ResourceTypesReaderServiceGetResourceTypeProcedure = "/c1.reader.v2.ResourceTypesReaderService/GetResourceType"
	// ResourcesReaderServiceGetResourceProcedure is the fully-qualified name of the
	// ResourcesReaderService's GetResource RPC.
	ResourcesReaderServiceGetResourceProcedure = "/c1.reader.v2.ResourcesReaderService/GetResource"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	resourceTypesReaderServiceServiceDescriptor               = v2.File_c1_reader_v2_resource_proto.Services().ByName("ResourceTypesReaderService")
	resourceTypesReaderServiceGetResourceTypeMethodDescriptor = resourceTypesReaderServiceServiceDescriptor.Methods().ByName("GetResourceType")
	resourcesReaderServiceServiceDescriptor                   = v2.File_c1_reader_v2_resource_proto.Services().ByName("ResourcesReaderService")
	resourcesReaderServiceGetResourceMethodDescriptor         = resourcesReaderServiceServiceDescriptor.Methods().ByName("GetResource")
)

// ResourceTypesReaderServiceClient is a client for the c1.reader.v2.ResourceTypesReaderService
// service.
type ResourceTypesReaderServiceClient interface {
	GetResourceType(context.Context, *connect.Request[v2.ResourceTypesReaderServiceGetResourceTypeRequest]) (*connect.Response[v2.ResourceTypesReaderServiceGetResourceTypeResponse], error)
}

// NewResourceTypesReaderServiceClient constructs a client for the
// c1.reader.v2.ResourceTypesReaderService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourceTypesReaderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResourceTypesReaderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourceTypesReaderServiceClient{
		getResourceType: connect.NewClient[v2.ResourceTypesReaderServiceGetResourceTypeRequest, v2.ResourceTypesReaderServiceGetResourceTypeResponse](
			httpClient,
			baseURL+ResourceTypesReaderServiceGetResourceTypeProcedure,
			connect.WithSchema(resourceTypesReaderServiceGetResourceTypeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// resourceTypesReaderServiceClient implements ResourceTypesReaderServiceClient.
type resourceTypesReaderServiceClient struct {
	getResourceType *connect.Client[v2.ResourceTypesReaderServiceGetResourceTypeRequest, v2.ResourceTypesReaderServiceGetResourceTypeResponse]
}

// GetResourceType calls c1.reader.v2.ResourceTypesReaderService.GetResourceType.
func (c *resourceTypesReaderServiceClient) GetResourceType(ctx context.Context, req *connect.Request[v2.ResourceTypesReaderServiceGetResourceTypeRequest]) (*connect.Response[v2.ResourceTypesReaderServiceGetResourceTypeResponse], error) {
	return c.getResourceType.CallUnary(ctx, req)
}

// ResourceTypesReaderServiceHandler is an implementation of the
// c1.reader.v2.ResourceTypesReaderService service.
type ResourceTypesReaderServiceHandler interface {
	GetResourceType(context.Context, *connect.Request[v2.ResourceTypesReaderServiceGetResourceTypeRequest]) (*connect.Response[v2.ResourceTypesReaderServiceGetResourceTypeResponse], error)
}

// NewResourceTypesReaderServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourceTypesReaderServiceHandler(svc ResourceTypesReaderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	resourceTypesReaderServiceGetResourceTypeHandler := connect.NewUnaryHandler(
		ResourceTypesReaderServiceGetResourceTypeProcedure,
		svc.GetResourceType,
		connect.WithSchema(resourceTypesReaderServiceGetResourceTypeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.reader.v2.ResourceTypesReaderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourceTypesReaderServiceGetResourceTypeProcedure:
			resourceTypesReaderServiceGetResourceTypeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourceTypesReaderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourceTypesReaderServiceHandler struct{}

func (UnimplementedResourceTypesReaderServiceHandler) GetResourceType(context.Context, *connect.Request[v2.ResourceTypesReaderServiceGetResourceTypeRequest]) (*connect.Response[v2.ResourceTypesReaderServiceGetResourceTypeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.reader.v2.ResourceTypesReaderService.GetResourceType is not implemented"))
}

// ResourcesReaderServiceClient is a client for the c1.reader.v2.ResourcesReaderService service.
type ResourcesReaderServiceClient interface {
	GetResource(context.Context, *connect.Request[v2.ResourcesReaderServiceGetResourceRequest]) (*connect.Response[v2.ResourcesReaderServiceGetResourceResponse], error)
}

// NewResourcesReaderServiceClient constructs a client for the c1.reader.v2.ResourcesReaderService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourcesReaderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ResourcesReaderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourcesReaderServiceClient{
		getResource: connect.NewClient[v2.ResourcesReaderServiceGetResourceRequest, v2.ResourcesReaderServiceGetResourceResponse](
			httpClient,
			baseURL+ResourcesReaderServiceGetResourceProcedure,
			connect.WithSchema(resourcesReaderServiceGetResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// resourcesReaderServiceClient implements ResourcesReaderServiceClient.
type resourcesReaderServiceClient struct {
	getResource *connect.Client[v2.ResourcesReaderServiceGetResourceRequest, v2.ResourcesReaderServiceGetResourceResponse]
}

// GetResource calls c1.reader.v2.ResourcesReaderService.GetResource.
func (c *resourcesReaderServiceClient) GetResource(ctx context.Context, req *connect.Request[v2.ResourcesReaderServiceGetResourceRequest]) (*connect.Response[v2.ResourcesReaderServiceGetResourceResponse], error) {
	return c.getResource.CallUnary(ctx, req)
}

// ResourcesReaderServiceHandler is an implementation of the c1.reader.v2.ResourcesReaderService
// service.
type ResourcesReaderServiceHandler interface {
	GetResource(context.Context, *connect.Request[v2.ResourcesReaderServiceGetResourceRequest]) (*connect.Response[v2.ResourcesReaderServiceGetResourceResponse], error)
}

// NewResourcesReaderServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourcesReaderServiceHandler(svc ResourcesReaderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	resourcesReaderServiceGetResourceHandler := connect.NewUnaryHandler(
		ResourcesReaderServiceGetResourceProcedure,
		svc.GetResource,
		connect.WithSchema(resourcesReaderServiceGetResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.reader.v2.ResourcesReaderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourcesReaderServiceGetResourceProcedure:
			resourcesReaderServiceGetResourceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourcesReaderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourcesReaderServiceHandler struct{}

func (UnimplementedResourcesReaderServiceHandler) GetResource(context.Context, *connect.Request[v2.ResourcesReaderServiceGetResourceRequest]) (*connect.Response[v2.ResourcesReaderServiceGetResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.reader.v2.ResourcesReaderService.GetResource is not implemented"))
}
