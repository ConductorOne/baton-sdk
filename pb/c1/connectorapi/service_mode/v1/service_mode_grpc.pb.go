// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: c1/connectorapi/service_mode/v1/service_mode.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorWorkServiceClient is the client API for ConnectorWorkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorWorkServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// Connector calls this to inform the platform that it is still working on the task
	// If after sometime we don't hear a heartbeat, the platform should scrap the work and move it back to pending
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Once the task is finished, the connector streams the results of the task
	FinishTask(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*FinishTaskResponse, error)
	UploadAsset(ctx context.Context, opts ...grpc.CallOption) (ConnectorWorkService_UploadAssetClient, error)
}

type connectorWorkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorWorkServiceClient(cc grpc.ClientConnInterface) ConnectorWorkServiceClient {
	return &connectorWorkServiceClient{cc}
}

func (c *connectorWorkServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.service_mode.v1.ConnectorWorkService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorWorkServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.service_mode.v1.ConnectorWorkService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorWorkServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.service_mode.v1.ConnectorWorkService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorWorkServiceClient) FinishTask(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*FinishTaskResponse, error) {
	out := new(FinishTaskResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.service_mode.v1.ConnectorWorkService/FinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorWorkServiceClient) UploadAsset(ctx context.Context, opts ...grpc.CallOption) (ConnectorWorkService_UploadAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConnectorWorkService_ServiceDesc.Streams[0], "/c1.connectorapi.service_mode.v1.ConnectorWorkService/UploadAsset", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorWorkServiceUploadAssetClient{stream}
	return x, nil
}

type ConnectorWorkService_UploadAssetClient interface {
	Send(*UploadAssetRequest) error
	CloseAndRecv() (*UploadAssetResponse, error)
	grpc.ClientStream
}

type connectorWorkServiceUploadAssetClient struct {
	grpc.ClientStream
}

func (x *connectorWorkServiceUploadAssetClient) Send(m *UploadAssetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectorWorkServiceUploadAssetClient) CloseAndRecv() (*UploadAssetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadAssetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectorWorkServiceServer is the server API for ConnectorWorkService service.
// All implementations should embed UnimplementedConnectorWorkServiceServer
// for forward compatibility
type ConnectorWorkServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// Connector calls this to inform the platform that it is still working on the task
	// If after sometime we don't hear a heartbeat, the platform should scrap the work and move it back to pending
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Once the task is finished, the connector streams the results of the task
	FinishTask(context.Context, *FinishTaskRequest) (*FinishTaskResponse, error)
	UploadAsset(ConnectorWorkService_UploadAssetServer) error
}

// UnimplementedConnectorWorkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorWorkServiceServer struct {
}

func (UnimplementedConnectorWorkServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedConnectorWorkServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedConnectorWorkServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedConnectorWorkServiceServer) FinishTask(context.Context, *FinishTaskRequest) (*FinishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedConnectorWorkServiceServer) UploadAsset(ConnectorWorkService_UploadAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}

// UnsafeConnectorWorkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorWorkServiceServer will
// result in compilation errors.
type UnsafeConnectorWorkServiceServer interface {
	mustEmbedUnimplementedConnectorWorkServiceServer()
}

func RegisterConnectorWorkServiceServer(s grpc.ServiceRegistrar, srv ConnectorWorkServiceServer) {
	s.RegisterService(&ConnectorWorkService_ServiceDesc, srv)
}

func _ConnectorWorkService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorWorkServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.service_mode.v1.ConnectorWorkService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorWorkServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorWorkService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorWorkServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.service_mode.v1.ConnectorWorkService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorWorkServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorWorkService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorWorkServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.service_mode.v1.ConnectorWorkService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorWorkServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorWorkService_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorWorkServiceServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.service_mode.v1.ConnectorWorkService/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorWorkServiceServer).FinishTask(ctx, req.(*FinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorWorkService_UploadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorWorkServiceServer).UploadAsset(&connectorWorkServiceUploadAssetServer{stream})
}

type ConnectorWorkService_UploadAssetServer interface {
	SendAndClose(*UploadAssetResponse) error
	Recv() (*UploadAssetRequest, error)
	grpc.ServerStream
}

type connectorWorkServiceUploadAssetServer struct {
	grpc.ServerStream
}

func (x *connectorWorkServiceUploadAssetServer) SendAndClose(m *UploadAssetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectorWorkServiceUploadAssetServer) Recv() (*UploadAssetRequest, error) {
	m := new(UploadAssetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectorWorkService_ServiceDesc is the grpc.ServiceDesc for ConnectorWorkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorWorkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connectorapi.service_mode.v1.ConnectorWorkService",
	HandlerType: (*ConnectorWorkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ConnectorWorkService_Hello_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _ConnectorWorkService_GetTask_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _ConnectorWorkService_Heartbeat_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _ConnectorWorkService_FinishTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsset",
			Handler:       _ConnectorWorkService_UploadAsset_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "c1/connectorapi/service_mode/v1/service_mode.proto",
}
