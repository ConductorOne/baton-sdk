// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connectorapi/rtun/v1/rtun.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReverseTunnelServiceLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReverseTunnelServiceLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReverseTunnelServiceLinkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReverseTunnelServiceLinkRequestMultiError, or nil if none found.
func (m *ReverseTunnelServiceLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReverseTunnelServiceLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFrame()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReverseTunnelServiceLinkRequestValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReverseTunnelServiceLinkRequestValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrame()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReverseTunnelServiceLinkRequestValidationError{
				field:  "Frame",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReverseTunnelServiceLinkRequestMultiError(errors)
	}

	return nil
}

// ReverseTunnelServiceLinkRequestMultiError is an error wrapping multiple
// validation errors returned by ReverseTunnelServiceLinkRequest.ValidateAll()
// if the designated constraints aren't met.
type ReverseTunnelServiceLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReverseTunnelServiceLinkRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReverseTunnelServiceLinkRequestMultiError) AllErrors() []error { return m }

// ReverseTunnelServiceLinkRequestValidationError is the validation error
// returned by ReverseTunnelServiceLinkRequest.Validate if the designated
// constraints aren't met.
type ReverseTunnelServiceLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReverseTunnelServiceLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReverseTunnelServiceLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReverseTunnelServiceLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReverseTunnelServiceLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReverseTunnelServiceLinkRequestValidationError) ErrorName() string {
	return "ReverseTunnelServiceLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReverseTunnelServiceLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReverseTunnelServiceLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReverseTunnelServiceLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReverseTunnelServiceLinkRequestValidationError{}

// Validate checks the field values on ReverseTunnelServiceLinkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReverseTunnelServiceLinkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReverseTunnelServiceLinkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReverseTunnelServiceLinkResponseMultiError, or nil if none found.
func (m *ReverseTunnelServiceLinkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReverseTunnelServiceLinkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFrame()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReverseTunnelServiceLinkResponseValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReverseTunnelServiceLinkResponseValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrame()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReverseTunnelServiceLinkResponseValidationError{
				field:  "Frame",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReverseTunnelServiceLinkResponseMultiError(errors)
	}

	return nil
}

// ReverseTunnelServiceLinkResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReverseTunnelServiceLinkResponse.ValidateAll() if the designated
// constraints aren't met.
type ReverseTunnelServiceLinkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReverseTunnelServiceLinkResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReverseTunnelServiceLinkResponseMultiError) AllErrors() []error { return m }

// ReverseTunnelServiceLinkResponseValidationError is the validation error
// returned by ReverseTunnelServiceLinkResponse.Validate if the designated
// constraints aren't met.
type ReverseTunnelServiceLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReverseTunnelServiceLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReverseTunnelServiceLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReverseTunnelServiceLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReverseTunnelServiceLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReverseTunnelServiceLinkResponseValidationError) ErrorName() string {
	return "ReverseTunnelServiceLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReverseTunnelServiceLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReverseTunnelServiceLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReverseTunnelServiceLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReverseTunnelServiceLinkResponseValidationError{}

// Validate checks the field values on Frame with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Frame) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Frame with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FrameMultiError, or nil if none found.
func (m *Frame) ValidateAll() error {
	return m.validate(true)
}

func (m *Frame) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	switch v := m.Kind.(type) {
	case *Frame_Hello:
		if v == nil {
			err := FrameValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHello()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Hello",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Hello",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHello()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FrameValidationError{
					field:  "Hello",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Frame_Syn:
		if v == nil {
			err := FrameValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSyn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Syn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Syn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSyn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FrameValidationError{
					field:  "Syn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Frame_Data:
		if v == nil {
			err := FrameValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FrameValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Frame_Fin:
		if v == nil {
			err := FrameValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Fin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Fin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FrameValidationError{
					field:  "Fin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Frame_Rst:
		if v == nil {
			err := FrameValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRst()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Rst",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FrameValidationError{
						field:  "Rst",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRst()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FrameValidationError{
					field:  "Rst",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FrameMultiError(errors)
	}

	return nil
}

// FrameMultiError is an error wrapping multiple validation errors returned by
// Frame.ValidateAll() if the designated constraints aren't met.
type FrameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FrameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FrameMultiError) AllErrors() []error { return m }

// FrameValidationError is the validation error returned by Frame.Validate if
// the designated constraints aren't met.
type FrameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FrameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FrameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FrameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FrameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FrameValidationError) ErrorName() string { return "FrameValidationError" }

// Error satisfies the builtin error interface
func (e FrameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFrame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FrameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FrameValidationError{}

// Validate checks the field values on Hello with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Hello) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hello with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HelloMultiError, or nil if none found.
func (m *Hello) ValidateAll() error {
	return m.validate(true)
}

func (m *Hello) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	if len(errors) > 0 {
		return HelloMultiError(errors)
	}

	return nil
}

// HelloMultiError is an error wrapping multiple validation errors returned by
// Hello.ValidateAll() if the designated constraints aren't met.
type HelloMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloMultiError) AllErrors() []error { return m }

// HelloValidationError is the validation error returned by Hello.Validate if
// the designated constraints aren't met.
type HelloValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloValidationError) ErrorName() string { return "HelloValidationError" }

// Error satisfies the builtin error interface
func (e HelloValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHello.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloValidationError{}

// Validate checks the field values on Syn with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Syn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Syn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SynMultiError, or nil if none found.
func (m *Syn) ValidateAll() error {
	return m.validate(true)
}

func (m *Syn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Port

	if len(errors) > 0 {
		return SynMultiError(errors)
	}

	return nil
}

// SynMultiError is an error wrapping multiple validation errors returned by
// Syn.ValidateAll() if the designated constraints aren't met.
type SynMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SynMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SynMultiError) AllErrors() []error { return m }

// SynValidationError is the validation error returned by Syn.Validate if the
// designated constraints aren't met.
type SynValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SynValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SynValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SynValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SynValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SynValidationError) ErrorName() string { return "SynValidationError" }

// Error satisfies the builtin error interface
func (e SynValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SynValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SynValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Payload

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on Fin with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Fin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FinMultiError, or nil if none found.
func (m *Fin) ValidateAll() error {
	return m.validate(true)
}

func (m *Fin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ack

	if len(errors) > 0 {
		return FinMultiError(errors)
	}

	return nil
}

// FinMultiError is an error wrapping multiple validation errors returned by
// Fin.ValidateAll() if the designated constraints aren't met.
type FinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinMultiError) AllErrors() []error { return m }

// FinValidationError is the validation error returned by Fin.Validate if the
// designated constraints aren't met.
type FinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinValidationError) ErrorName() string { return "FinValidationError" }

// Error satisfies the builtin error interface
func (e FinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinValidationError{}

// Validate checks the field values on Rst with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rst with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RstMultiError, or nil if none found.
func (m *Rst) ValidateAll() error {
	return m.validate(true)
}

func (m *Rst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return RstMultiError(errors)
	}

	return nil
}

// RstMultiError is an error wrapping multiple validation errors returned by
// Rst.ValidateAll() if the designated constraints aren't met.
type RstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RstMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RstMultiError) AllErrors() []error { return m }

// RstValidationError is the validation error returned by Rst.Validate if the
// designated constraints aren't met.
type RstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RstValidationError) ErrorName() string { return "RstValidationError" }

// Error satisfies the builtin error interface
func (e RstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RstValidationError{}
