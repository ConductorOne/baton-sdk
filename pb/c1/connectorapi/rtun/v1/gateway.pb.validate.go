// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connectorapi/rtun/v1/gateway.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReverseDialerServiceOpenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReverseDialerServiceOpenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReverseDialerServiceOpenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReverseDialerServiceOpenRequestMultiError, or nil if none found.
func (m *ReverseDialerServiceOpenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReverseDialerServiceOpenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *ReverseDialerServiceOpenRequest_OpenReq:
		if v == nil {
			err := ReverseDialerServiceOpenRequestValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOpenReq()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenRequestValidationError{
						field:  "OpenReq",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenRequestValidationError{
						field:  "OpenReq",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpenReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReverseDialerServiceOpenRequestValidationError{
					field:  "OpenReq",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReverseDialerServiceOpenRequest_Frame:
		if v == nil {
			err := ReverseDialerServiceOpenRequestValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFrame()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenRequestValidationError{
						field:  "Frame",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenRequestValidationError{
						field:  "Frame",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrame()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReverseDialerServiceOpenRequestValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReverseDialerServiceOpenRequestMultiError(errors)
	}

	return nil
}

// ReverseDialerServiceOpenRequestMultiError is an error wrapping multiple
// validation errors returned by ReverseDialerServiceOpenRequest.ValidateAll()
// if the designated constraints aren't met.
type ReverseDialerServiceOpenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReverseDialerServiceOpenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReverseDialerServiceOpenRequestMultiError) AllErrors() []error { return m }

// ReverseDialerServiceOpenRequestValidationError is the validation error
// returned by ReverseDialerServiceOpenRequest.Validate if the designated
// constraints aren't met.
type ReverseDialerServiceOpenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReverseDialerServiceOpenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReverseDialerServiceOpenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReverseDialerServiceOpenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReverseDialerServiceOpenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReverseDialerServiceOpenRequestValidationError) ErrorName() string {
	return "ReverseDialerServiceOpenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReverseDialerServiceOpenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReverseDialerServiceOpenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReverseDialerServiceOpenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReverseDialerServiceOpenRequestValidationError{}

// Validate checks the field values on ReverseDialerServiceOpenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReverseDialerServiceOpenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReverseDialerServiceOpenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReverseDialerServiceOpenResponseMultiError, or nil if none found.
func (m *ReverseDialerServiceOpenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReverseDialerServiceOpenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *ReverseDialerServiceOpenResponse_OpenResp:
		if v == nil {
			err := ReverseDialerServiceOpenResponseValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOpenResp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenResponseValidationError{
						field:  "OpenResp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenResponseValidationError{
						field:  "OpenResp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpenResp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReverseDialerServiceOpenResponseValidationError{
					field:  "OpenResp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ReverseDialerServiceOpenResponse_Frame:
		if v == nil {
			err := ReverseDialerServiceOpenResponseValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFrame()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenResponseValidationError{
						field:  "Frame",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReverseDialerServiceOpenResponseValidationError{
						field:  "Frame",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrame()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReverseDialerServiceOpenResponseValidationError{
					field:  "Frame",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ReverseDialerServiceOpenResponseMultiError(errors)
	}

	return nil
}

// ReverseDialerServiceOpenResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReverseDialerServiceOpenResponse.ValidateAll() if the designated
// constraints aren't met.
type ReverseDialerServiceOpenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReverseDialerServiceOpenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReverseDialerServiceOpenResponseMultiError) AllErrors() []error { return m }

// ReverseDialerServiceOpenResponseValidationError is the validation error
// returned by ReverseDialerServiceOpenResponse.Validate if the designated
// constraints aren't met.
type ReverseDialerServiceOpenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReverseDialerServiceOpenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReverseDialerServiceOpenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReverseDialerServiceOpenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReverseDialerServiceOpenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReverseDialerServiceOpenResponseValidationError) ErrorName() string {
	return "ReverseDialerServiceOpenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReverseDialerServiceOpenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReverseDialerServiceOpenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReverseDialerServiceOpenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReverseDialerServiceOpenResponseValidationError{}

// Validate checks the field values on OpenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OpenRequestMultiError, or
// nil if none found.
func (m *OpenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Gsid

	// no validation rules for ClientId

	// no validation rules for Port

	if len(errors) > 0 {
		return OpenRequestMultiError(errors)
	}

	return nil
}

// OpenRequestMultiError is an error wrapping multiple validation errors
// returned by OpenRequest.ValidateAll() if the designated constraints aren't met.
type OpenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenRequestMultiError) AllErrors() []error { return m }

// OpenRequestValidationError is the validation error returned by
// OpenRequest.Validate if the designated constraints aren't met.
type OpenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenRequestValidationError) ErrorName() string { return "OpenRequestValidationError" }

// Error satisfies the builtin error interface
func (e OpenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenRequestValidationError{}

// Validate checks the field values on OpenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OpenResponseMultiError, or
// nil if none found.
func (m *OpenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Gsid

	switch v := m.Result.(type) {
	case *OpenResponse_NotFound:
		if v == nil {
			err := OpenResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNotFound()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OpenResponseValidationError{
						field:  "NotFound",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OpenResponseValidationError{
						field:  "NotFound",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotFound()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpenResponseValidationError{
					field:  "NotFound",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OpenResponse_Opened:
		if v == nil {
			err := OpenResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOpened()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OpenResponseValidationError{
						field:  "Opened",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OpenResponseValidationError{
						field:  "Opened",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOpened()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpenResponseValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OpenResponseMultiError(errors)
	}

	return nil
}

// OpenResponseMultiError is an error wrapping multiple validation errors
// returned by OpenResponse.ValidateAll() if the designated constraints aren't met.
type OpenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenResponseMultiError) AllErrors() []error { return m }

// OpenResponseValidationError is the validation error returned by
// OpenResponse.Validate if the designated constraints aren't met.
type OpenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenResponseValidationError) ErrorName() string { return "OpenResponseValidationError" }

// Error satisfies the builtin error interface
func (e OpenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenResponseValidationError{}

// Validate checks the field values on NotFound with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotFound) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotFound with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotFoundMultiError, or nil
// if none found.
func (m *NotFound) ValidateAll() error {
	return m.validate(true)
}

func (m *NotFound) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotFoundMultiError(errors)
	}

	return nil
}

// NotFoundMultiError is an error wrapping multiple validation errors returned
// by NotFound.ValidateAll() if the designated constraints aren't met.
type NotFoundMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotFoundMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotFoundMultiError) AllErrors() []error { return m }

// NotFoundValidationError is the validation error returned by
// NotFound.Validate if the designated constraints aren't met.
type NotFoundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotFoundValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotFoundValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotFoundValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotFoundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotFoundValidationError) ErrorName() string { return "NotFoundValidationError" }

// Error satisfies the builtin error interface
func (e NotFoundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotFound.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotFoundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotFoundValidationError{}

// Validate checks the field values on Opened with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Opened) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Opened with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OpenedMultiError, or nil if none found.
func (m *Opened) ValidateAll() error {
	return m.validate(true)
}

func (m *Opened) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OpenedMultiError(errors)
	}

	return nil
}

// OpenedMultiError is an error wrapping multiple validation errors returned by
// Opened.ValidateAll() if the designated constraints aren't met.
type OpenedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenedMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenedMultiError) AllErrors() []error { return m }

// OpenedValidationError is the validation error returned by Opened.Validate if
// the designated constraints aren't met.
type OpenedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenedValidationError) ErrorName() string { return "OpenedValidationError" }

// Error satisfies the builtin error interface
func (e OpenedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpened.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenedValidationError{}
