// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connectorapi/rtun/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReverseDialer_Open_FullMethodName = "/c1.connectorapi.rtun.v1.ReverseDialer/Open"
)

// ReverseDialerClient is the client API for ReverseDialer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReverseDialer allows callers to establish connections to clients via the gateway.
// The gateway bridges caller streams to rtun sessions on the owner server.
type ReverseDialerClient interface {
	Open(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GatewayRequest, GatewayResponse], error)
}

type reverseDialerClient struct {
	cc grpc.ClientConnInterface
}

func NewReverseDialerClient(cc grpc.ClientConnInterface) ReverseDialerClient {
	return &reverseDialerClient{cc}
}

func (c *reverseDialerClient) Open(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GatewayRequest, GatewayResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReverseDialer_ServiceDesc.Streams[0], ReverseDialer_Open_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GatewayRequest, GatewayResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseDialer_OpenClient = grpc.BidiStreamingClient[GatewayRequest, GatewayResponse]

// ReverseDialerServer is the server API for ReverseDialer service.
// All implementations should embed UnimplementedReverseDialerServer
// for forward compatibility.
//
// ReverseDialer allows callers to establish connections to clients via the gateway.
// The gateway bridges caller streams to rtun sessions on the owner server.
type ReverseDialerServer interface {
	Open(grpc.BidiStreamingServer[GatewayRequest, GatewayResponse]) error
}

// UnimplementedReverseDialerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReverseDialerServer struct{}

func (UnimplementedReverseDialerServer) Open(grpc.BidiStreamingServer[GatewayRequest, GatewayResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedReverseDialerServer) testEmbeddedByValue() {}

// UnsafeReverseDialerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReverseDialerServer will
// result in compilation errors.
type UnsafeReverseDialerServer interface {
	mustEmbedUnimplementedReverseDialerServer()
}

func RegisterReverseDialerServer(s grpc.ServiceRegistrar, srv ReverseDialerServer) {
	// If the following call pancis, it indicates UnimplementedReverseDialerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReverseDialer_ServiceDesc, srv)
}

func _ReverseDialer_Open_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReverseDialerServer).Open(&grpc.GenericServerStream[GatewayRequest, GatewayResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseDialer_OpenServer = grpc.BidiStreamingServer[GatewayRequest, GatewayResponse]

// ReverseDialer_ServiceDesc is the grpc.ServiceDesc for ReverseDialer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReverseDialer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connectorapi.rtun.v1.ReverseDialer",
	HandlerType: (*ReverseDialerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Open",
			Handler:       _ReverseDialer_Open_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "c1/connectorapi/rtun/v1/gateway.proto",
}
