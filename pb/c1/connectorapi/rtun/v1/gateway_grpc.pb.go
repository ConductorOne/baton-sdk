// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connectorapi/rtun/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReverseDialerService_Open_FullMethodName = "/c1.connectorapi.rtun.v1.ReverseDialerService/Open"
)

// ReverseDialerServiceClient is the client API for ReverseDialerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReverseDialer allows callers to establish connections to clients via the gateway.
// The gateway bridges caller streams to rtun sessions on the owner server.
type ReverseDialerServiceClient interface {
	Open(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse], error)
}

type reverseDialerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReverseDialerServiceClient(cc grpc.ClientConnInterface) ReverseDialerServiceClient {
	return &reverseDialerServiceClient{cc}
}

func (c *reverseDialerServiceClient) Open(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReverseDialerService_ServiceDesc.Streams[0], ReverseDialerService_Open_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseDialerService_OpenClient = grpc.BidiStreamingClient[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse]

// ReverseDialerServiceServer is the server API for ReverseDialerService service.
// All implementations should embed UnimplementedReverseDialerServiceServer
// for forward compatibility.
//
// ReverseDialer allows callers to establish connections to clients via the gateway.
// The gateway bridges caller streams to rtun sessions on the owner server.
type ReverseDialerServiceServer interface {
	Open(grpc.BidiStreamingServer[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse]) error
}

// UnimplementedReverseDialerServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReverseDialerServiceServer struct{}

func (UnimplementedReverseDialerServiceServer) Open(grpc.BidiStreamingServer[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedReverseDialerServiceServer) testEmbeddedByValue() {}

// UnsafeReverseDialerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReverseDialerServiceServer will
// result in compilation errors.
type UnsafeReverseDialerServiceServer interface {
	mustEmbedUnimplementedReverseDialerServiceServer()
}

func RegisterReverseDialerServiceServer(s grpc.ServiceRegistrar, srv ReverseDialerServiceServer) {
	// If the following call pancis, it indicates UnimplementedReverseDialerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReverseDialerService_ServiceDesc, srv)
}

func _ReverseDialerService_Open_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReverseDialerServiceServer).Open(&grpc.GenericServerStream[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseDialerService_OpenServer = grpc.BidiStreamingServer[ReverseDialerServiceOpenRequest, ReverseDialerServiceOpenResponse]

// ReverseDialerService_ServiceDesc is the grpc.ServiceDesc for ReverseDialerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReverseDialerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connectorapi.rtun.v1.ReverseDialerService",
	HandlerType: (*ReverseDialerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Open",
			Handler:       _ReverseDialerService_Open_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "c1/connectorapi/rtun/v1/gateway.proto",
}
