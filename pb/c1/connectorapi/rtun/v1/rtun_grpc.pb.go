// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connectorapi/rtun/v1/rtun.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReverseTunnel_Link_FullMethodName = "/c1.connectorapi.rtun.v1.ReverseTunnel/Link"
)

// ReverseTunnelClient is the client API for ReverseTunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReverseTunnelClient interface {
	Link(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Frame, Frame], error)
}

type reverseTunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewReverseTunnelClient(cc grpc.ClientConnInterface) ReverseTunnelClient {
	return &reverseTunnelClient{cc}
}

func (c *reverseTunnelClient) Link(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Frame, Frame], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReverseTunnel_ServiceDesc.Streams[0], ReverseTunnel_Link_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Frame, Frame]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseTunnel_LinkClient = grpc.BidiStreamingClient[Frame, Frame]

// ReverseTunnelServer is the server API for ReverseTunnel service.
// All implementations should embed UnimplementedReverseTunnelServer
// for forward compatibility.
type ReverseTunnelServer interface {
	Link(grpc.BidiStreamingServer[Frame, Frame]) error
}

// UnimplementedReverseTunnelServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReverseTunnelServer struct{}

func (UnimplementedReverseTunnelServer) Link(grpc.BidiStreamingServer[Frame, Frame]) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedReverseTunnelServer) testEmbeddedByValue() {}

// UnsafeReverseTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReverseTunnelServer will
// result in compilation errors.
type UnsafeReverseTunnelServer interface {
	mustEmbedUnimplementedReverseTunnelServer()
}

func RegisterReverseTunnelServer(s grpc.ServiceRegistrar, srv ReverseTunnelServer) {
	// If the following call pancis, it indicates UnimplementedReverseTunnelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReverseTunnel_ServiceDesc, srv)
}

func _ReverseTunnel_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReverseTunnelServer).Link(&grpc.GenericServerStream[Frame, Frame]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseTunnel_LinkServer = grpc.BidiStreamingServer[Frame, Frame]

// ReverseTunnel_ServiceDesc is the grpc.ServiceDesc for ReverseTunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReverseTunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connectorapi.rtun.v1.ReverseTunnel",
	HandlerType: (*ReverseTunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _ReverseTunnel_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "c1/connectorapi/rtun/v1/rtun.proto",
}
