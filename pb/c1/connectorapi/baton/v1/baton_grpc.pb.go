// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connectorapi/baton/v1/baton.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatonService_Hello_FullMethodName          = "/c1.connectorapi.baton.v1.BatonService/Hello"
	BatonService_GetTask_FullMethodName        = "/c1.connectorapi.baton.v1.BatonService/GetTask"
	BatonService_Heartbeat_FullMethodName      = "/c1.connectorapi.baton.v1.BatonService/Heartbeat"
	BatonService_FinishTask_FullMethodName     = "/c1.connectorapi.baton.v1.BatonService/FinishTask"
	BatonService_UploadAsset_FullMethodName    = "/c1.connectorapi.baton.v1.BatonService/UploadAsset"
	BatonService_StartDebugging_FullMethodName = "/c1.connectorapi.baton.v1.BatonService/StartDebugging"
)

// BatonServiceClient is the client API for BatonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatonServiceClient interface {
	Hello(ctx context.Context, in *BatonServiceHelloRequest, opts ...grpc.CallOption) (*BatonServiceHelloResponse, error)
	GetTask(ctx context.Context, in *BatonServiceGetTaskRequest, opts ...grpc.CallOption) (*BatonServiceGetTaskResponse, error)
	Heartbeat(ctx context.Context, in *BatonServiceHeartbeatRequest, opts ...grpc.CallOption) (*BatonServiceHeartbeatResponse, error)
	FinishTask(ctx context.Context, in *BatonServiceFinishTaskRequest, opts ...grpc.CallOption) (*BatonServiceFinishTaskResponse, error)
	UploadAsset(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse], error)
	StartDebugging(ctx context.Context, in *StartDebuggingRequest, opts ...grpc.CallOption) (*StartDebuggingResponse, error)
}

type batonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatonServiceClient(cc grpc.ClientConnInterface) BatonServiceClient {
	return &batonServiceClient{cc}
}

func (c *batonServiceClient) Hello(ctx context.Context, in *BatonServiceHelloRequest, opts ...grpc.CallOption) (*BatonServiceHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatonServiceHelloResponse)
	err := c.cc.Invoke(ctx, BatonService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) GetTask(ctx context.Context, in *BatonServiceGetTaskRequest, opts ...grpc.CallOption) (*BatonServiceGetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatonServiceGetTaskResponse)
	err := c.cc.Invoke(ctx, BatonService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) Heartbeat(ctx context.Context, in *BatonServiceHeartbeatRequest, opts ...grpc.CallOption) (*BatonServiceHeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatonServiceHeartbeatResponse)
	err := c.cc.Invoke(ctx, BatonService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) FinishTask(ctx context.Context, in *BatonServiceFinishTaskRequest, opts ...grpc.CallOption) (*BatonServiceFinishTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatonServiceFinishTaskResponse)
	err := c.cc.Invoke(ctx, BatonService_FinishTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) UploadAsset(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BatonService_ServiceDesc.Streams[0], BatonService_UploadAsset_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BatonService_UploadAssetClient = grpc.ClientStreamingClient[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse]

func (c *batonServiceClient) StartDebugging(ctx context.Context, in *StartDebuggingRequest, opts ...grpc.CallOption) (*StartDebuggingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDebuggingResponse)
	err := c.cc.Invoke(ctx, BatonService_StartDebugging_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatonServiceServer is the server API for BatonService service.
// All implementations should embed UnimplementedBatonServiceServer
// for forward compatibility.
type BatonServiceServer interface {
	Hello(context.Context, *BatonServiceHelloRequest) (*BatonServiceHelloResponse, error)
	GetTask(context.Context, *BatonServiceGetTaskRequest) (*BatonServiceGetTaskResponse, error)
	Heartbeat(context.Context, *BatonServiceHeartbeatRequest) (*BatonServiceHeartbeatResponse, error)
	FinishTask(context.Context, *BatonServiceFinishTaskRequest) (*BatonServiceFinishTaskResponse, error)
	UploadAsset(grpc.ClientStreamingServer[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse]) error
	StartDebugging(context.Context, *StartDebuggingRequest) (*StartDebuggingResponse, error)
}

// UnimplementedBatonServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatonServiceServer struct{}

func (UnimplementedBatonServiceServer) Hello(context.Context, *BatonServiceHelloRequest) (*BatonServiceHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedBatonServiceServer) GetTask(context.Context, *BatonServiceGetTaskRequest) (*BatonServiceGetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedBatonServiceServer) Heartbeat(context.Context, *BatonServiceHeartbeatRequest) (*BatonServiceHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedBatonServiceServer) FinishTask(context.Context, *BatonServiceFinishTaskRequest) (*BatonServiceFinishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedBatonServiceServer) UploadAsset(grpc.ClientStreamingServer[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedBatonServiceServer) StartDebugging(context.Context, *StartDebuggingRequest) (*StartDebuggingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDebugging not implemented")
}
func (UnimplementedBatonServiceServer) testEmbeddedByValue() {}

// UnsafeBatonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatonServiceServer will
// result in compilation errors.
type UnsafeBatonServiceServer interface {
	mustEmbedUnimplementedBatonServiceServer()
}

func RegisterBatonServiceServer(s grpc.ServiceRegistrar, srv BatonServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatonService_ServiceDesc, srv)
}

func _BatonService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatonService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).Hello(ctx, req.(*BatonServiceHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceGetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatonService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).GetTask(ctx, req.(*BatonServiceGetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatonService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).Heartbeat(ctx, req.(*BatonServiceHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceFinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatonService_FinishTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).FinishTask(ctx, req.(*BatonServiceFinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_UploadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatonServiceServer).UploadAsset(&grpc.GenericServerStream[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BatonService_UploadAssetServer = grpc.ClientStreamingServer[BatonServiceUploadAssetRequest, BatonServiceUploadAssetResponse]

func _BatonService_StartDebugging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDebuggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).StartDebugging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatonService_StartDebugging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).StartDebugging(ctx, req.(*StartDebuggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatonService_ServiceDesc is the grpc.ServiceDesc for BatonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connectorapi.baton.v1.BatonService",
	HandlerType: (*BatonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _BatonService_Hello_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _BatonService_GetTask_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _BatonService_Heartbeat_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _BatonService_FinishTask_Handler,
		},
		{
			MethodName: "StartDebugging",
			Handler:    _BatonService_StartDebugging_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsset",
			Handler:       _BatonService_UploadAsset_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "c1/connectorapi/baton/v1/baton.proto",
}
