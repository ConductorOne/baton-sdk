// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: c1/connectorapi/baton/v1/baton.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatonServiceClient is the client API for BatonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatonServiceClient interface {
	Hello(ctx context.Context, in *BatonServiceHelloRequest, opts ...grpc.CallOption) (*BatonServiceHelloResponse, error)
	GetTask(ctx context.Context, in *BatonServiceGetTaskRequest, opts ...grpc.CallOption) (*BatonServiceGetTaskResponse, error)
	Heartbeat(ctx context.Context, in *BatonServiceHeartbeatRequest, opts ...grpc.CallOption) (*BatonServiceHeartbeatResponse, error)
	FinishTask(ctx context.Context, in *BatonServiceFinishTaskRequest, opts ...grpc.CallOption) (*BatonServiceFinishTaskResponse, error)
	UploadAsset(ctx context.Context, opts ...grpc.CallOption) (BatonService_UploadAssetClient, error)
}

type batonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatonServiceClient(cc grpc.ClientConnInterface) BatonServiceClient {
	return &batonServiceClient{cc}
}

func (c *batonServiceClient) Hello(ctx context.Context, in *BatonServiceHelloRequest, opts ...grpc.CallOption) (*BatonServiceHelloResponse, error) {
	out := new(BatonServiceHelloResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.baton.v1.BatonService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) GetTask(ctx context.Context, in *BatonServiceGetTaskRequest, opts ...grpc.CallOption) (*BatonServiceGetTaskResponse, error) {
	out := new(BatonServiceGetTaskResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.baton.v1.BatonService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) Heartbeat(ctx context.Context, in *BatonServiceHeartbeatRequest, opts ...grpc.CallOption) (*BatonServiceHeartbeatResponse, error) {
	out := new(BatonServiceHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.baton.v1.BatonService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) FinishTask(ctx context.Context, in *BatonServiceFinishTaskRequest, opts ...grpc.CallOption) (*BatonServiceFinishTaskResponse, error) {
	out := new(BatonServiceFinishTaskResponse)
	err := c.cc.Invoke(ctx, "/c1.connectorapi.baton.v1.BatonService/FinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batonServiceClient) UploadAsset(ctx context.Context, opts ...grpc.CallOption) (BatonService_UploadAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &BatonService_ServiceDesc.Streams[0], "/c1.connectorapi.baton.v1.BatonService/UploadAsset", opts...)
	if err != nil {
		return nil, err
	}
	x := &batonServiceUploadAssetClient{stream}
	return x, nil
}

type BatonService_UploadAssetClient interface {
	Send(*BatonServiceUploadAssetRequest) error
	CloseAndRecv() (*BatonServiceUploadAssetResponse, error)
	grpc.ClientStream
}

type batonServiceUploadAssetClient struct {
	grpc.ClientStream
}

func (x *batonServiceUploadAssetClient) Send(m *BatonServiceUploadAssetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batonServiceUploadAssetClient) CloseAndRecv() (*BatonServiceUploadAssetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatonServiceUploadAssetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatonServiceServer is the server API for BatonService service.
// All implementations should embed UnimplementedBatonServiceServer
// for forward compatibility
type BatonServiceServer interface {
	Hello(context.Context, *BatonServiceHelloRequest) (*BatonServiceHelloResponse, error)
	GetTask(context.Context, *BatonServiceGetTaskRequest) (*BatonServiceGetTaskResponse, error)
	Heartbeat(context.Context, *BatonServiceHeartbeatRequest) (*BatonServiceHeartbeatResponse, error)
	FinishTask(context.Context, *BatonServiceFinishTaskRequest) (*BatonServiceFinishTaskResponse, error)
	UploadAsset(BatonService_UploadAssetServer) error
}

// UnimplementedBatonServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBatonServiceServer struct {
}

func (UnimplementedBatonServiceServer) Hello(context.Context, *BatonServiceHelloRequest) (*BatonServiceHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedBatonServiceServer) GetTask(context.Context, *BatonServiceGetTaskRequest) (*BatonServiceGetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedBatonServiceServer) Heartbeat(context.Context, *BatonServiceHeartbeatRequest) (*BatonServiceHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedBatonServiceServer) FinishTask(context.Context, *BatonServiceFinishTaskRequest) (*BatonServiceFinishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedBatonServiceServer) UploadAsset(BatonService_UploadAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}

// UnsafeBatonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatonServiceServer will
// result in compilation errors.
type UnsafeBatonServiceServer interface {
	mustEmbedUnimplementedBatonServiceServer()
}

func RegisterBatonServiceServer(s grpc.ServiceRegistrar, srv BatonServiceServer) {
	s.RegisterService(&BatonService_ServiceDesc, srv)
}

func _BatonService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.baton.v1.BatonService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).Hello(ctx, req.(*BatonServiceHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceGetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.baton.v1.BatonService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).GetTask(ctx, req.(*BatonServiceGetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.baton.v1.BatonService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).Heartbeat(ctx, req.(*BatonServiceHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatonServiceFinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatonServiceServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connectorapi.baton.v1.BatonService/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatonServiceServer).FinishTask(ctx, req.(*BatonServiceFinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatonService_UploadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatonServiceServer).UploadAsset(&batonServiceUploadAssetServer{stream})
}

type BatonService_UploadAssetServer interface {
	SendAndClose(*BatonServiceUploadAssetResponse) error
	Recv() (*BatonServiceUploadAssetRequest, error)
	grpc.ServerStream
}

type batonServiceUploadAssetServer struct {
	grpc.ServerStream
}

func (x *batonServiceUploadAssetServer) SendAndClose(m *BatonServiceUploadAssetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batonServiceUploadAssetServer) Recv() (*BatonServiceUploadAssetRequest, error) {
	m := new(BatonServiceUploadAssetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatonService_ServiceDesc is the grpc.ServiceDesc for BatonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connectorapi.baton.v1.BatonService",
	HandlerType: (*BatonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _BatonService_Hello_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _BatonService_GetTask_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _BatonService_Heartbeat_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _BatonService_FinishTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsset",
			Handler:       _BatonService_UploadAsset_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "c1/connectorapi/baton/v1/baton.proto",
}
