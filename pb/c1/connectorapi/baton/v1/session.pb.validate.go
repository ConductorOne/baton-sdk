// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connectorapi/baton/v1/session.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := GetRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 256 {
		err := GetRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

var _GetRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on GetManyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetManyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetManyRequestMultiError,
// or nil if none found.
func (m *GetManyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetManyRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := GetManyRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetKeys()); l < 1 || l > 200 {
		err := GetManyRequestValidationError{
			field:  "Keys",
			reason: "value must contain between 1 and 200 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_GetManyRequest_Keys_Unique := make(map[string]struct{}, len(m.GetKeys()))

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if _, exists := _GetManyRequest_Keys_Unique[item]; exists {
			err := GetManyRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_GetManyRequest_Keys_Unique[item] = struct{}{}
		}

		if l := utf8.RuneCountInString(item); l < 1 || l > 256 {
			err := GetManyRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetManyRequestMultiError(errors)
	}

	return nil
}

// GetManyRequestMultiError is an error wrapping multiple validation errors
// returned by GetManyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetManyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManyRequestMultiError) AllErrors() []error { return m }

// GetManyRequestValidationError is the validation error returned by
// GetManyRequest.Validate if the designated constraints aren't met.
type GetManyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManyRequestValidationError) ErrorName() string { return "GetManyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetManyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManyRequestValidationError{}

var _GetManyRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on GetManyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetManyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetManyResponseMultiError, or nil if none found.
func (m *GetManyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return GetManyResponseMultiError(errors)
	}

	return nil
}

// GetManyResponseMultiError is an error wrapping multiple validation errors
// returned by GetManyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetManyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManyResponseMultiError) AllErrors() []error { return m }

// GetManyResponseValidationError is the validation error returned by
// GetManyResponse.Validate if the designated constraints aren't met.
type GetManyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManyResponseValidationError) ErrorName() string { return "GetManyResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetManyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManyResponseValidationError{}

// Validate checks the field values on GetAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllRequestMultiError, or
// nil if none found.
func (m *GetAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetAllRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := GetAllRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return GetAllRequestMultiError(errors)
	}

	return nil
}

// GetAllRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRequestMultiError) AllErrors() []error { return m }

// GetAllRequestValidationError is the validation error returned by
// GetAllRequest.Validate if the designated constraints aren't met.
type GetAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRequestValidationError) ErrorName() string { return "GetAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRequestValidationError{}

var _GetAllRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on GetAllResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllResponseMultiError,
// or nil if none found.
func (m *GetAllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetAllResponseMultiError(errors)
	}

	return nil
}

// GetAllResponseMultiError is an error wrapping multiple validation errors
// returned by GetAllResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllResponseMultiError) AllErrors() []error { return m }

// GetAllResponseValidationError is the validation error returned by
// GetAllResponse.Validate if the designated constraints aren't met.
type GetAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllResponseValidationError) ErrorName() string { return "GetAllResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllResponseValidationError{}

// Validate checks the field values on SetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetRequestMultiError, or
// nil if none found.
func (m *SetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SetRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := SetRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 256 {
		err := SetRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetValue()) > 1048576 {
		err := SetRequestValidationError{
			field:  "Value",
			reason: "value length must be at most 1048576 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetRequestMultiError(errors)
	}

	return nil
}

// SetRequestMultiError is an error wrapping multiple validation errors
// returned by SetRequest.ValidateAll() if the designated constraints aren't met.
type SetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRequestMultiError) AllErrors() []error { return m }

// SetRequestValidationError is the validation error returned by
// SetRequest.Validate if the designated constraints aren't met.
type SetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRequestValidationError) ErrorName() string { return "SetRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRequestValidationError{}

var _SetRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on SetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetResponseMultiError, or
// nil if none found.
func (m *SetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetResponseMultiError(errors)
	}

	return nil
}

// SetResponseMultiError is an error wrapping multiple validation errors
// returned by SetResponse.ValidateAll() if the designated constraints aren't met.
type SetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetResponseMultiError) AllErrors() []error { return m }

// SetResponseValidationError is the validation error returned by
// SetResponse.Validate if the designated constraints aren't met.
type SetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetResponseValidationError) ErrorName() string { return "SetResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetResponseValidationError{}

// Validate checks the field values on SetManyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetManyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetManyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetManyRequestMultiError,
// or nil if none found.
func (m *SetManyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetManyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SetManyRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := SetManyRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetValues()))
		i := 0
		for key := range m.GetValues() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValues()[key]
			_ = val

			if l := utf8.RuneCountInString(key); l < 1 || l > 256 {
				err := SetManyRequestValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "value length must be between 1 and 256 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if len(val) > 1048576 {
				err := SetManyRequestValidationError{
					field:  fmt.Sprintf("Values[%v]", key),
					reason: "value length must be at most 1048576 bytes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return SetManyRequestMultiError(errors)
	}

	return nil
}

// SetManyRequestMultiError is an error wrapping multiple validation errors
// returned by SetManyRequest.ValidateAll() if the designated constraints
// aren't met.
type SetManyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetManyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetManyRequestMultiError) AllErrors() []error { return m }

// SetManyRequestValidationError is the validation error returned by
// SetManyRequest.Validate if the designated constraints aren't met.
type SetManyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetManyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetManyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetManyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetManyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetManyRequestValidationError) ErrorName() string { return "SetManyRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetManyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetManyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetManyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetManyRequestValidationError{}

var _SetManyRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on SetManyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetManyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetManyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetManyResponseMultiError, or nil if none found.
func (m *SetManyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetManyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetManyResponseMultiError(errors)
	}

	return nil
}

// SetManyResponseMultiError is an error wrapping multiple validation errors
// returned by SetManyResponse.ValidateAll() if the designated constraints
// aren't met.
type SetManyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetManyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetManyResponseMultiError) AllErrors() []error { return m }

// SetManyResponseValidationError is the validation error returned by
// SetManyResponse.Validate if the designated constraints aren't met.
type SetManyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetManyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetManyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetManyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetManyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetManyResponseValidationError) ErrorName() string { return "SetManyResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetManyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetManyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetManyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetManyResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := DeleteRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 256 {
		err := DeleteRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

var _DeleteRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on DeleteManyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteManyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteManyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteManyRequestMultiError, or nil if none found.
func (m *DeleteManyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteManyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteManyRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := DeleteManyRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetKeys()); l < 1 || l > 200 {
		err := DeleteManyRequestValidationError{
			field:  "Keys",
			reason: "value must contain between 1 and 200 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 256 {
			err := DeleteManyRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 256 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteManyRequestMultiError(errors)
	}

	return nil
}

// DeleteManyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteManyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteManyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteManyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteManyRequestMultiError) AllErrors() []error { return m }

// DeleteManyRequestValidationError is the validation error returned by
// DeleteManyRequest.Validate if the designated constraints aren't met.
type DeleteManyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteManyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteManyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteManyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteManyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteManyRequestValidationError) ErrorName() string {
	return "DeleteManyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteManyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteManyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteManyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteManyRequestValidationError{}

var _DeleteManyRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on DeleteManyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteManyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteManyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteManyResponseMultiError, or nil if none found.
func (m *DeleteManyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteManyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteManyResponseMultiError(errors)
	}

	return nil
}

// DeleteManyResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteManyResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteManyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteManyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteManyResponseMultiError) AllErrors() []error { return m }

// DeleteManyResponseValidationError is the validation error returned by
// DeleteManyResponse.Validate if the designated constraints aren't met.
type DeleteManyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteManyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteManyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteManyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteManyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteManyResponseValidationError) ErrorName() string {
	return "DeleteManyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteManyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteManyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteManyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteManyResponseValidationError{}

// Validate checks the field values on ClearRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearRequestMultiError, or
// nil if none found.
func (m *ClearRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ClearRequest_SyncId_Pattern.MatchString(m.GetSyncId()) {
		err := ClearRequestValidationError{
			field:  "SyncId",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{27}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClearRequestMultiError(errors)
	}

	return nil
}

// ClearRequestMultiError is an error wrapping multiple validation errors
// returned by ClearRequest.ValidateAll() if the designated constraints aren't met.
type ClearRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearRequestMultiError) AllErrors() []error { return m }

// ClearRequestValidationError is the validation error returned by
// ClearRequest.Validate if the designated constraints aren't met.
type ClearRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearRequestValidationError) ErrorName() string { return "ClearRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClearRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearRequestValidationError{}

var _ClearRequest_SyncId_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{27}$")

// Validate checks the field values on ClearResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClearResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClearResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClearResponseMultiError, or
// nil if none found.
func (m *ClearResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClearResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClearResponseMultiError(errors)
	}

	return nil
}

// ClearResponseMultiError is an error wrapping multiple validation errors
// returned by ClearResponse.ValidateAll() if the designated constraints
// aren't met.
type ClearResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClearResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClearResponseMultiError) AllErrors() []error { return m }

// ClearResponseValidationError is the validation error returned by
// ClearResponse.Validate if the designated constraints aren't met.
type ClearResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearResponseValidationError) ErrorName() string { return "ClearResponseValidationError" }

// Error satisfies the builtin error interface
func (e ClearResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearResponseValidationError{}
