// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: c1/connectorapi/baton/v1/baton.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/conductorone/baton-sdk/pb/c1/connectorapi/baton/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BatonServiceName is the fully-qualified name of the BatonService service.
	BatonServiceName = "c1.connectorapi.baton.v1.BatonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BatonServiceHelloProcedure is the fully-qualified name of the BatonService's Hello RPC.
	BatonServiceHelloProcedure = "/c1.connectorapi.baton.v1.BatonService/Hello"
	// BatonServiceGetTaskProcedure is the fully-qualified name of the BatonService's GetTask RPC.
	BatonServiceGetTaskProcedure = "/c1.connectorapi.baton.v1.BatonService/GetTask"
	// BatonServiceHeartbeatProcedure is the fully-qualified name of the BatonService's Heartbeat RPC.
	BatonServiceHeartbeatProcedure = "/c1.connectorapi.baton.v1.BatonService/Heartbeat"
	// BatonServiceFinishTaskProcedure is the fully-qualified name of the BatonService's FinishTask RPC.
	BatonServiceFinishTaskProcedure = "/c1.connectorapi.baton.v1.BatonService/FinishTask"
	// BatonServiceUploadAssetProcedure is the fully-qualified name of the BatonService's UploadAsset
	// RPC.
	BatonServiceUploadAssetProcedure = "/c1.connectorapi.baton.v1.BatonService/UploadAsset"
	// BatonServiceStartDebuggingProcedure is the fully-qualified name of the BatonService's
	// StartDebugging RPC.
	BatonServiceStartDebuggingProcedure = "/c1.connectorapi.baton.v1.BatonService/StartDebugging"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	batonServiceServiceDescriptor              = v1.File_c1_connectorapi_baton_v1_baton_proto.Services().ByName("BatonService")
	batonServiceHelloMethodDescriptor          = batonServiceServiceDescriptor.Methods().ByName("Hello")
	batonServiceGetTaskMethodDescriptor        = batonServiceServiceDescriptor.Methods().ByName("GetTask")
	batonServiceHeartbeatMethodDescriptor      = batonServiceServiceDescriptor.Methods().ByName("Heartbeat")
	batonServiceFinishTaskMethodDescriptor     = batonServiceServiceDescriptor.Methods().ByName("FinishTask")
	batonServiceUploadAssetMethodDescriptor    = batonServiceServiceDescriptor.Methods().ByName("UploadAsset")
	batonServiceStartDebuggingMethodDescriptor = batonServiceServiceDescriptor.Methods().ByName("StartDebugging")
)

// BatonServiceClient is a client for the c1.connectorapi.baton.v1.BatonService service.
type BatonServiceClient interface {
	Hello(context.Context, *connect.Request[v1.BatonServiceHelloRequest]) (*connect.Response[v1.BatonServiceHelloResponse], error)
	GetTask(context.Context, *connect.Request[v1.BatonServiceGetTaskRequest]) (*connect.Response[v1.BatonServiceGetTaskResponse], error)
	Heartbeat(context.Context, *connect.Request[v1.BatonServiceHeartbeatRequest]) (*connect.Response[v1.BatonServiceHeartbeatResponse], error)
	FinishTask(context.Context, *connect.Request[v1.BatonServiceFinishTaskRequest]) (*connect.Response[v1.BatonServiceFinishTaskResponse], error)
	UploadAsset(context.Context) *connect.ClientStreamForClient[v1.BatonServiceUploadAssetRequest, v1.BatonServiceUploadAssetResponse]
	StartDebugging(context.Context, *connect.Request[v1.StartDebuggingRequest]) (*connect.Response[v1.StartDebuggingResponse], error)
}

// NewBatonServiceClient constructs a client for the c1.connectorapi.baton.v1.BatonService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBatonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BatonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &batonServiceClient{
		hello: connect.NewClient[v1.BatonServiceHelloRequest, v1.BatonServiceHelloResponse](
			httpClient,
			baseURL+BatonServiceHelloProcedure,
			connect.WithSchema(batonServiceHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.BatonServiceGetTaskRequest, v1.BatonServiceGetTaskResponse](
			httpClient,
			baseURL+BatonServiceGetTaskProcedure,
			connect.WithSchema(batonServiceGetTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[v1.BatonServiceHeartbeatRequest, v1.BatonServiceHeartbeatResponse](
			httpClient,
			baseURL+BatonServiceHeartbeatProcedure,
			connect.WithSchema(batonServiceHeartbeatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		finishTask: connect.NewClient[v1.BatonServiceFinishTaskRequest, v1.BatonServiceFinishTaskResponse](
			httpClient,
			baseURL+BatonServiceFinishTaskProcedure,
			connect.WithSchema(batonServiceFinishTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadAsset: connect.NewClient[v1.BatonServiceUploadAssetRequest, v1.BatonServiceUploadAssetResponse](
			httpClient,
			baseURL+BatonServiceUploadAssetProcedure,
			connect.WithSchema(batonServiceUploadAssetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startDebugging: connect.NewClient[v1.StartDebuggingRequest, v1.StartDebuggingResponse](
			httpClient,
			baseURL+BatonServiceStartDebuggingProcedure,
			connect.WithSchema(batonServiceStartDebuggingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// batonServiceClient implements BatonServiceClient.
type batonServiceClient struct {
	hello          *connect.Client[v1.BatonServiceHelloRequest, v1.BatonServiceHelloResponse]
	getTask        *connect.Client[v1.BatonServiceGetTaskRequest, v1.BatonServiceGetTaskResponse]
	heartbeat      *connect.Client[v1.BatonServiceHeartbeatRequest, v1.BatonServiceHeartbeatResponse]
	finishTask     *connect.Client[v1.BatonServiceFinishTaskRequest, v1.BatonServiceFinishTaskResponse]
	uploadAsset    *connect.Client[v1.BatonServiceUploadAssetRequest, v1.BatonServiceUploadAssetResponse]
	startDebugging *connect.Client[v1.StartDebuggingRequest, v1.StartDebuggingResponse]
}

// Hello calls c1.connectorapi.baton.v1.BatonService.Hello.
func (c *batonServiceClient) Hello(ctx context.Context, req *connect.Request[v1.BatonServiceHelloRequest]) (*connect.Response[v1.BatonServiceHelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// GetTask calls c1.connectorapi.baton.v1.BatonService.GetTask.
func (c *batonServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.BatonServiceGetTaskRequest]) (*connect.Response[v1.BatonServiceGetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// Heartbeat calls c1.connectorapi.baton.v1.BatonService.Heartbeat.
func (c *batonServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v1.BatonServiceHeartbeatRequest]) (*connect.Response[v1.BatonServiceHeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// FinishTask calls c1.connectorapi.baton.v1.BatonService.FinishTask.
func (c *batonServiceClient) FinishTask(ctx context.Context, req *connect.Request[v1.BatonServiceFinishTaskRequest]) (*connect.Response[v1.BatonServiceFinishTaskResponse], error) {
	return c.finishTask.CallUnary(ctx, req)
}

// UploadAsset calls c1.connectorapi.baton.v1.BatonService.UploadAsset.
func (c *batonServiceClient) UploadAsset(ctx context.Context) *connect.ClientStreamForClient[v1.BatonServiceUploadAssetRequest, v1.BatonServiceUploadAssetResponse] {
	return c.uploadAsset.CallClientStream(ctx)
}

// StartDebugging calls c1.connectorapi.baton.v1.BatonService.StartDebugging.
func (c *batonServiceClient) StartDebugging(ctx context.Context, req *connect.Request[v1.StartDebuggingRequest]) (*connect.Response[v1.StartDebuggingResponse], error) {
	return c.startDebugging.CallUnary(ctx, req)
}

// BatonServiceHandler is an implementation of the c1.connectorapi.baton.v1.BatonService service.
type BatonServiceHandler interface {
	Hello(context.Context, *connect.Request[v1.BatonServiceHelloRequest]) (*connect.Response[v1.BatonServiceHelloResponse], error)
	GetTask(context.Context, *connect.Request[v1.BatonServiceGetTaskRequest]) (*connect.Response[v1.BatonServiceGetTaskResponse], error)
	Heartbeat(context.Context, *connect.Request[v1.BatonServiceHeartbeatRequest]) (*connect.Response[v1.BatonServiceHeartbeatResponse], error)
	FinishTask(context.Context, *connect.Request[v1.BatonServiceFinishTaskRequest]) (*connect.Response[v1.BatonServiceFinishTaskResponse], error)
	UploadAsset(context.Context, *connect.ClientStream[v1.BatonServiceUploadAssetRequest]) (*connect.Response[v1.BatonServiceUploadAssetResponse], error)
	StartDebugging(context.Context, *connect.Request[v1.StartDebuggingRequest]) (*connect.Response[v1.StartDebuggingResponse], error)
}

// NewBatonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBatonServiceHandler(svc BatonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	batonServiceHelloHandler := connect.NewUnaryHandler(
		BatonServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(batonServiceHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	batonServiceGetTaskHandler := connect.NewUnaryHandler(
		BatonServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(batonServiceGetTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	batonServiceHeartbeatHandler := connect.NewUnaryHandler(
		BatonServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(batonServiceHeartbeatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	batonServiceFinishTaskHandler := connect.NewUnaryHandler(
		BatonServiceFinishTaskProcedure,
		svc.FinishTask,
		connect.WithSchema(batonServiceFinishTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	batonServiceUploadAssetHandler := connect.NewClientStreamHandler(
		BatonServiceUploadAssetProcedure,
		svc.UploadAsset,
		connect.WithSchema(batonServiceUploadAssetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	batonServiceStartDebuggingHandler := connect.NewUnaryHandler(
		BatonServiceStartDebuggingProcedure,
		svc.StartDebugging,
		connect.WithSchema(batonServiceStartDebuggingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/c1.connectorapi.baton.v1.BatonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BatonServiceHelloProcedure:
			batonServiceHelloHandler.ServeHTTP(w, r)
		case BatonServiceGetTaskProcedure:
			batonServiceGetTaskHandler.ServeHTTP(w, r)
		case BatonServiceHeartbeatProcedure:
			batonServiceHeartbeatHandler.ServeHTTP(w, r)
		case BatonServiceFinishTaskProcedure:
			batonServiceFinishTaskHandler.ServeHTTP(w, r)
		case BatonServiceUploadAssetProcedure:
			batonServiceUploadAssetHandler.ServeHTTP(w, r)
		case BatonServiceStartDebuggingProcedure:
			batonServiceStartDebuggingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBatonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBatonServiceHandler struct{}

func (UnimplementedBatonServiceHandler) Hello(context.Context, *connect.Request[v1.BatonServiceHelloRequest]) (*connect.Response[v1.BatonServiceHelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connectorapi.baton.v1.BatonService.Hello is not implemented"))
}

func (UnimplementedBatonServiceHandler) GetTask(context.Context, *connect.Request[v1.BatonServiceGetTaskRequest]) (*connect.Response[v1.BatonServiceGetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connectorapi.baton.v1.BatonService.GetTask is not implemented"))
}

func (UnimplementedBatonServiceHandler) Heartbeat(context.Context, *connect.Request[v1.BatonServiceHeartbeatRequest]) (*connect.Response[v1.BatonServiceHeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connectorapi.baton.v1.BatonService.Heartbeat is not implemented"))
}

func (UnimplementedBatonServiceHandler) FinishTask(context.Context, *connect.Request[v1.BatonServiceFinishTaskRequest]) (*connect.Response[v1.BatonServiceFinishTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connectorapi.baton.v1.BatonService.FinishTask is not implemented"))
}

func (UnimplementedBatonServiceHandler) UploadAsset(context.Context, *connect.ClientStream[v1.BatonServiceUploadAssetRequest]) (*connect.Response[v1.BatonServiceUploadAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connectorapi.baton.v1.BatonService.UploadAsset is not implemented"))
}

func (UnimplementedBatonServiceHandler) StartDebugging(context.Context, *connect.Request[v1.StartDebuggingRequest]) (*connect.Response[v1.StartDebuggingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("c1.connectorapi.baton.v1.BatonService.StartDebugging is not implemented"))
}
