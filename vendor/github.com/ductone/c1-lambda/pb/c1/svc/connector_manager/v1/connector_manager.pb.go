// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: c1/svc/connector_manager/v1/connector_manager.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetConnectorConfigRequest struct {
	state                                  protoimpl.MessageState                  `protogen:"open.v1"`
	Sigv4SignedRequestSTSGetCallerIdentity *Sigv4SignedRequestSTSGetCallerIdentity `protobuf:"bytes,1,opt,name=sigv4SignedRequestSTSGetCallerIdentity,proto3" json:"sigv4SignedRequestSTSGetCallerIdentity,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *GetConnectorConfigRequest) Reset() {
	*x = GetConnectorConfigRequest{}
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorConfigRequest) ProtoMessage() {}

func (x *GetConnectorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConnectorConfigRequest) Descriptor() ([]byte, []int) {
	return file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescGZIP(), []int{0}
}

func (x *GetConnectorConfigRequest) GetSigv4SignedRequestSTSGetCallerIdentity() *Sigv4SignedRequestSTSGetCallerIdentity {
	if x != nil {
		return x.Sigv4SignedRequestSTSGetCallerIdentity
	}
	return nil
}

type GetConnectorConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *structpb.Struct       `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	LastUpdated   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConnectorConfigResponse) Reset() {
	*x = GetConnectorConfigResponse{}
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorConfigResponse) ProtoMessage() {}

func (x *GetConnectorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConnectorConfigResponse) Descriptor() ([]byte, []int) {
	return file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescGZIP(), []int{1}
}

func (x *GetConnectorConfigResponse) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetConnectorConfigResponse) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type SignedHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedHeader) Reset() {
	*x = SignedHeader{}
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedHeader) ProtoMessage() {}

func (x *SignedHeader) ProtoReflect() protoreflect.Message {
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedHeader.ProtoReflect.Descriptor instead.
func (*SignedHeader) Descriptor() ([]byte, []int) {
	return file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescGZIP(), []int{2}
}

func (x *SignedHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SignedHeader) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type Sigv4SignedRequestSTSGetCallerIdentity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Endpoint      string                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Headers       []*SignedHeader        `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Body          []byte                 `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) Reset() {
	*x = Sigv4SignedRequestSTSGetCallerIdentity{}
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sigv4SignedRequestSTSGetCallerIdentity) ProtoMessage() {}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sigv4SignedRequestSTSGetCallerIdentity.ProtoReflect.Descriptor instead.
func (*Sigv4SignedRequestSTSGetCallerIdentity) Descriptor() ([]byte, []int) {
	return file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescGZIP(), []int{3}
}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) GetHeaders() []*SignedHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Sigv4SignedRequestSTSGetCallerIdentity) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_c1_svc_connector_manager_v1_connector_manager_proto protoreflect.FileDescriptor

var file_c1_svc_connector_manager_v1_connector_manager_proto_rawDesc = []byte{
	0x0a, 0x33, 0x63, 0x31, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x31, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x9b, 0x01, 0x0a, 0x26, 0x73, 0x69, 0x67, 0x76, 0x34, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x54, 0x53, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x63, 0x31, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x76, 0x34, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x54, 0x53, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x26, 0x73, 0x69, 0x67, 0x76, 0x34, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x54, 0x53, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x8c, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x0c,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x26, 0x53, 0x69, 0x67, 0x76, 0x34, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x54, 0x53, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x31, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0x9a, 0x01, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x2e, 0x63, 0x31, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x63, 0x31, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x6e, 0x65, 0x2f,
	0x63, 0x31, 0x2d, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x31, 0x2f,
	0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescOnce sync.Once
	file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescData = file_c1_svc_connector_manager_v1_connector_manager_proto_rawDesc
)

func file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescGZIP() []byte {
	file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescOnce.Do(func() {
		file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescData)
	})
	return file_c1_svc_connector_manager_v1_connector_manager_proto_rawDescData
}

var file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_c1_svc_connector_manager_v1_connector_manager_proto_goTypes = []any{
	(*GetConnectorConfigRequest)(nil),              // 0: c1.svc.connector_manager.v1.GetConnectorConfigRequest
	(*GetConnectorConfigResponse)(nil),             // 1: c1.svc.connector_manager.v1.GetConnectorConfigResponse
	(*SignedHeader)(nil),                           // 2: c1.svc.connector_manager.v1.SignedHeader
	(*Sigv4SignedRequestSTSGetCallerIdentity)(nil), // 3: c1.svc.connector_manager.v1.Sigv4SignedRequestSTSGetCallerIdentity
	(*structpb.Struct)(nil),                        // 4: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                  // 5: google.protobuf.Timestamp
}
var file_c1_svc_connector_manager_v1_connector_manager_proto_depIdxs = []int32{
	3, // 0: c1.svc.connector_manager.v1.GetConnectorConfigRequest.sigv4SignedRequestSTSGetCallerIdentity:type_name -> c1.svc.connector_manager.v1.Sigv4SignedRequestSTSGetCallerIdentity
	4, // 1: c1.svc.connector_manager.v1.GetConnectorConfigResponse.config:type_name -> google.protobuf.Struct
	5, // 2: c1.svc.connector_manager.v1.GetConnectorConfigResponse.last_updated:type_name -> google.protobuf.Timestamp
	2, // 3: c1.svc.connector_manager.v1.Sigv4SignedRequestSTSGetCallerIdentity.headers:type_name -> c1.svc.connector_manager.v1.SignedHeader
	0, // 4: c1.svc.connector_manager.v1.ConnectorManager.GetConnectorConfig:input_type -> c1.svc.connector_manager.v1.GetConnectorConfigRequest
	1, // 5: c1.svc.connector_manager.v1.ConnectorManager.GetConnectorConfig:output_type -> c1.svc.connector_manager.v1.GetConnectorConfigResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_c1_svc_connector_manager_v1_connector_manager_proto_init() }
func file_c1_svc_connector_manager_v1_connector_manager_proto_init() {
	if File_c1_svc_connector_manager_v1_connector_manager_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_c1_svc_connector_manager_v1_connector_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_c1_svc_connector_manager_v1_connector_manager_proto_goTypes,
		DependencyIndexes: file_c1_svc_connector_manager_v1_connector_manager_proto_depIdxs,
		MessageInfos:      file_c1_svc_connector_manager_v1_connector_manager_proto_msgTypes,
	}.Build()
	File_c1_svc_connector_manager_v1_connector_manager_proto = out.File
	file_c1_svc_connector_manager_v1_connector_manager_proto_rawDesc = nil
	file_c1_svc_connector_manager_v1_connector_manager_proto_goTypes = nil
	file_c1_svc_connector_manager_v1_connector_manager_proto_depIdxs = nil
}
