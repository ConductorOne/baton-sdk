// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: c1/svc/connector_manager/v1/connector_manager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorManager_GetConnectorConfig_FullMethodName = "/c1.svc.connector_manager.v1.ConnectorManager/GetConnectorConfig"
)

// ConnectorManagerClient is the client API for ConnectorManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorManagerClient interface {
	GetConnectorConfig(ctx context.Context, in *GetConnectorConfigRequest, opts ...grpc.CallOption) (*GetConnectorConfigResponse, error)
}

type connectorManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorManagerClient(cc grpc.ClientConnInterface) ConnectorManagerClient {
	return &connectorManagerClient{cc}
}

func (c *connectorManagerClient) GetConnectorConfig(ctx context.Context, in *GetConnectorConfigRequest, opts ...grpc.CallOption) (*GetConnectorConfigResponse, error) {
	out := new(GetConnectorConfigResponse)
	err := c.cc.Invoke(ctx, ConnectorManager_GetConnectorConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorManagerServer is the server API for ConnectorManager service.
// All implementations should embed UnimplementedConnectorManagerServer
// for forward compatibility
type ConnectorManagerServer interface {
	GetConnectorConfig(context.Context, *GetConnectorConfigRequest) (*GetConnectorConfigResponse, error)
}

// UnimplementedConnectorManagerServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorManagerServer struct {
}

func (UnimplementedConnectorManagerServer) GetConnectorConfig(context.Context, *GetConnectorConfigRequest) (*GetConnectorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorConfig not implemented")
}

// UnsafeConnectorManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorManagerServer will
// result in compilation errors.
type UnsafeConnectorManagerServer interface {
	mustEmbedUnimplementedConnectorManagerServer()
}

func RegisterConnectorManagerServer(s grpc.ServiceRegistrar, srv ConnectorManagerServer) {
	s.RegisterService(&ConnectorManager_ServiceDesc, srv)
}

func _ConnectorManager_GetConnectorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorManagerServer).GetConnectorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorManager_GetConnectorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorManagerServer).GetConnectorConfig(ctx, req.(*GetConnectorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorManager_ServiceDesc is the grpc.ServiceDesc for ConnectorManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.svc.connector_manager.v1.ConnectorManager",
	HandlerType: (*ConnectorManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectorConfig",
			Handler:    _ConnectorManager_GetConnectorConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/svc/connector_manager/v1/connector_manager.proto",
}
