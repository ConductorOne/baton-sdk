// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/svc/connector_manager/v1/connector_manager.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetConnectorConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectorConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectorConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectorConfigRequestMultiError, or nil if none found.
func (m *GetConnectorConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectorConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSigv4SignedRequestSTSGetCallerIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectorConfigRequestValidationError{
					field:  "Sigv4SignedRequestSTSGetCallerIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectorConfigRequestValidationError{
					field:  "Sigv4SignedRequestSTSGetCallerIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSigv4SignedRequestSTSGetCallerIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectorConfigRequestValidationError{
				field:  "Sigv4SignedRequestSTSGetCallerIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConnectorConfigRequestMultiError(errors)
	}

	return nil
}

// GetConnectorConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetConnectorConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type GetConnectorConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectorConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectorConfigRequestMultiError) AllErrors() []error { return m }

// GetConnectorConfigRequestValidationError is the validation error returned by
// GetConnectorConfigRequest.Validate if the designated constraints aren't met.
type GetConnectorConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectorConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectorConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectorConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectorConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectorConfigRequestValidationError) ErrorName() string {
	return "GetConnectorConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectorConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectorConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectorConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectorConfigRequestValidationError{}

// Validate checks the field values on GetConnectorConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectorConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectorConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectorConfigResponseMultiError, or nil if none found.
func (m *GetConnectorConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectorConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectorConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectorConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectorConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectorConfigResponseValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectorConfigResponseValidationError{
					field:  "LastUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectorConfigResponseValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConnectorConfigResponseMultiError(errors)
	}

	return nil
}

// GetConnectorConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetConnectorConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type GetConnectorConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectorConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectorConfigResponseMultiError) AllErrors() []error { return m }

// GetConnectorConfigResponseValidationError is the validation error returned
// by GetConnectorConfigResponse.Validate if the designated constraints aren't met.
type GetConnectorConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectorConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectorConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectorConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectorConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectorConfigResponseValidationError) ErrorName() string {
	return "GetConnectorConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectorConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectorConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectorConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectorConfigResponseValidationError{}

// Validate checks the field values on SignedHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignedHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignedHeader with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignedHeaderMultiError, or
// nil if none found.
func (m *SignedHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *SignedHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return SignedHeaderMultiError(errors)
	}

	return nil
}

// SignedHeaderMultiError is an error wrapping multiple validation errors
// returned by SignedHeader.ValidateAll() if the designated constraints aren't met.
type SignedHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignedHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignedHeaderMultiError) AllErrors() []error { return m }

// SignedHeaderValidationError is the validation error returned by
// SignedHeader.Validate if the designated constraints aren't met.
type SignedHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignedHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignedHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignedHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignedHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignedHeaderValidationError) ErrorName() string { return "SignedHeaderValidationError" }

// Error satisfies the builtin error interface
func (e SignedHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignedHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignedHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignedHeaderValidationError{}

// Validate checks the field values on Sigv4SignedRequestSTSGetCallerIdentity
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Sigv4SignedRequestSTSGetCallerIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Sigv4SignedRequestSTSGetCallerIdentity with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// Sigv4SignedRequestSTSGetCallerIdentityMultiError, or nil if none found.
func (m *Sigv4SignedRequestSTSGetCallerIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *Sigv4SignedRequestSTSGetCallerIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	// no validation rules for Endpoint

	for idx, item := range m.GetHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Sigv4SignedRequestSTSGetCallerIdentityValidationError{
						field:  fmt.Sprintf("Headers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Sigv4SignedRequestSTSGetCallerIdentityValidationError{
						field:  fmt.Sprintf("Headers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Sigv4SignedRequestSTSGetCallerIdentityValidationError{
					field:  fmt.Sprintf("Headers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Body

	if len(errors) > 0 {
		return Sigv4SignedRequestSTSGetCallerIdentityMultiError(errors)
	}

	return nil
}

// Sigv4SignedRequestSTSGetCallerIdentityMultiError is an error wrapping
// multiple validation errors returned by
// Sigv4SignedRequestSTSGetCallerIdentity.ValidateAll() if the designated
// constraints aren't met.
type Sigv4SignedRequestSTSGetCallerIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Sigv4SignedRequestSTSGetCallerIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Sigv4SignedRequestSTSGetCallerIdentityMultiError) AllErrors() []error { return m }

// Sigv4SignedRequestSTSGetCallerIdentityValidationError is the validation
// error returned by Sigv4SignedRequestSTSGetCallerIdentity.Validate if the
// designated constraints aren't met.
type Sigv4SignedRequestSTSGetCallerIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Sigv4SignedRequestSTSGetCallerIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Sigv4SignedRequestSTSGetCallerIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Sigv4SignedRequestSTSGetCallerIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Sigv4SignedRequestSTSGetCallerIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Sigv4SignedRequestSTSGetCallerIdentityValidationError) ErrorName() string {
	return "Sigv4SignedRequestSTSGetCallerIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e Sigv4SignedRequestSTSGetCallerIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSigv4SignedRequestSTSGetCallerIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Sigv4SignedRequestSTSGetCallerIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Sigv4SignedRequestSTSGetCallerIdentityValidationError{}
