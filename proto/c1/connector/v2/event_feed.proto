syntax = "proto3";

package c1.connector.v2;

import "c1/connector/v2/entitlement.proto";
import "c1/connector/v2/grant.proto";
import "c1/connector/v2/resource.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/conductorone/baton-sdk/pb/c1/connector/v2";

service EventService {
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse);
  rpc ListEventFeeds(ListEventFeedsRequest) returns (ListEventFeedsResponse);
}

message ListEventsRequest {
  // Can function like a page token but also can be arbitrary to resume a feed at any point
  string cursor = 1 [(validate.rules).string = {
    ignore_empty: true
    min_bytes: 1
    max_bytes: 4096
  }];
  google.protobuf.Timestamp start_at = 2;
  uint32 page_size = 3 [(validate.rules).uint32 = {
    ignore_empty: true
    lte: 250
  }];
  repeated google.protobuf.Any annotations = 4;
  // Used to specify a specific event feed to list events from.
  // If not provided, the connector will use the old event feed.
  string event_feed_id = 5 [(validate.rules).string = {
    min_bytes: 1
    max_bytes: 1024
    ignore_empty: true
  }];
}

message ListEventsResponse {
  repeated Event events = 1;
  string cursor = 2 [(validate.rules).string = {
    ignore_empty: true
    min_bytes: 1
    max_bytes: 4096
  }];
  bool has_more = 3;
  repeated google.protobuf.Any annotations = 4;
}

message ListEventFeedsRequest {
  repeated google.protobuf.Any annotations = 1;
}

message ListEventFeedsResponse {
  repeated EventFeedMetadata list = 1;
  repeated google.protobuf.Any annotations = 2;
}

message Event {
  string id = 1;
  google.protobuf.Timestamp occurred_at = 2;

  // Each event has structs that will usually be mostly empty.
  // Stream consumer must be defensive about what it's reading
  oneof event {
    UsageEvent usage_event = 100;
    GrantEvent grant_event = 101;
    RevokeEvent revoke_event = 102;
    ResourceChangeEvent resource_change_event = 103;
    CreateGrantEvent create_grant_event = 104;
    CreateRevokeEvent create_revoke_event = 105;
  }

  // May contain resources for targets, actor, or items referenced in events
  repeated google.protobuf.Any annotations = 3;
}

message UsageEvent {
  c1.connector.v2.Resource target_resource = 1;
  c1.connector.v2.Resource actor_resource = 2;
}

// Unrelated to this effort, but valuable for other projects
message GrantEvent {
  c1.connector.v2.Grant grant = 1;
}

message CreateGrantEvent {
  c1.connector.v2.Entitlement entitlement = 1 [(validate.rules).message = {required: true}];
  c1.connector.v2.Resource principal = 2 [(validate.rules).message = {required: true}];
  repeated google.protobuf.Any annotations = 3;
}

message CreateRevokeEvent {
  c1.connector.v2.Entitlement entitlement = 1 [(validate.rules).message = {required: true}];
  c1.connector.v2.Resource principal = 2 [(validate.rules).message = {required: true}];
  repeated google.protobuf.Any annotations = 3;
}

message RevokeEvent {
  c1.connector.v2.Entitlement entitlement = 1;
  c1.connector.v2.Resource principal = 2;
}

// generic light weight event indicating a resource was changed
message ResourceChangeEvent {
  ResourceId resource_id = 1 [(validate.rules).message = {required: true}];
  ResourceId parent_resource_id = 2;
}

enum EventType {
  reserved 2, 3; // grant and revoke (could be added back in the future)
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_USAGE = 1;
  EVENT_TYPE_RESOURCE_CHANGE = 4;
  EVENT_TYPE_CREATE_GRANT = 5;
  EVENT_TYPE_CREATE_REVOKE = 6;
}

message EventFeedMetadata {
  // unique identifier for the event feed
  string id = 1 [(validate.rules).string = {
    min_bytes: 1
    max_bytes: 1024
  }];
  repeated EventType supported_event_types = 2 [(validate.rules).repeated = {
    unique: true
    items: {
      enum: {defined_only: true}
    }
  }];
}
