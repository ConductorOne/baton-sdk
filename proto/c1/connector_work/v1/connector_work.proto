syntax = "proto3";

package c1.connector_work.v1;

option go_package = "github.com/conductorone/baton-sdk/pb/c1/connector_work/v1";

import "c1/connector/v2/resource.proto";
import "c1/connector/v2/entitlement.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

service ConnectorWorkService {
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);

  // Connector calls this to inform the platform that it is still working on the task
  // If after sometime we don't hear a heartbeat, the platform should scrap the work and move it back to pending
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Once the task is finished, the connector streams the results of the task
  rpc FinishTask(stream FinishTaskRequest) returns (FinishTaskResponse);
}

message SyncFullTask {}
message SyncResourceTask {
  connector.v2.Resource resource = 1;
}

message GrantTask {
  connector.v2.Entitlement entitlement = 1;
  connector.v2.Resource principal = 2;
  repeated google.protobuf.Any annotations = 3;
}

message RevokeTask {
  connector.v2.Entitlement entitlement = 1;
  connector.v2.Resource principal = 2;
  repeated google.protobuf.Any annotations = 3;
}

message Task {
  enum Status {
    UNKNOWN = 0;
    PENDING = 1;
    SCHEDULED = 2;
    RUNNING = 3;
    FINISHED = 4;
  }
  string id = 1;
  Status status = 2;
  oneof task_type {
    SyncFullTask sync_full = 100;
    GrantTask grant = 101;
    RevokeTask revoke = 102;
  }
}

message GetTaskRequest {
  enum TaskType {
    UNKNOWN = 0;
    FULL_SYNC = 1;
    PROVISION = 2;
  }

  repeated TaskType task_types = 1;
}
message GetTaskResponse {
  Task task = 1;
  google.protobuf.Timestamp retry_at = 2;
}

message HeartbeatRequest {
  string task_id = 1;
  repeated google.protobuf.Any annotations = 2; // Useful for returning status updates on the task
}

message HeartbeatResponse {
  google.protobuf.Timestamp next_deadline = 1;
  bool cancelled = 2; // Backend has decided that we should stop working on this
  repeated google.protobuf.Any annotations = 3;
}

message Error {
  string error = 1;
  bool fatal = 2;
  repeated google.protobuf.Any annotations = 3;
}

message UploadMetadata {
  string sha256_checksum = 1;
  repeated google.protobuf.Any annotations = 2;
}

message UploadData {
  bytes data = 1;
  repeated google.protobuf.Any annotations = 2;
}

// Connector submits a task has been finished. It should always be removed from the queue, and if it isn't a fatal error, we should re-add it to the queue to try again.
message FinishTaskRequest {
  string task_id = 1;
  oneof finalState {
    UploadMetadata upload_metadata = 100;
    UploadData upload_data = 101;
    Error error = 102;
  }
}

message FinishTaskResponse {
  repeated google.protobuf.Any annotations = 1;
}